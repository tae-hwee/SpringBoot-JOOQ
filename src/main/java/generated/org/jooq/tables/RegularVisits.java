/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.RegularVisitsRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RegularVisits extends TableImpl<RegularVisitsRecord> {

    private static final long serialVersionUID = 1251774517;

    /**
     * The reference instance of <code>rs-parking-node.regular_visits</code>
     */
    public static final RegularVisits REGULAR_VISITS = new RegularVisits();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegularVisitsRecord> getRecordType() {
        return RegularVisitsRecord.class;
    }

    /**
     * The column <code>rs-parking-node.regular_visits.id</code>.
     */
    public final TableField<RegularVisitsRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.regular_visits.created</code>.
     */
    public final TableField<RegularVisitsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.regular_visits.discounted</code>.
     */
    public final TableField<RegularVisitsRecord, BigDecimal> DISCOUNTED = createField(DSL.name("discounted"), org.jooq.impl.SQLDataType.DECIMAL(11, 2).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>rs-parking-node.regular_visits.dropped</code>.
     */
    public final TableField<RegularVisitsRecord, LocalDateTime> DROPPED = createField(DSL.name("dropped"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.regular_visits.creatorId</code>.
     */
    public final TableField<RegularVisitsRecord, Long> CREATORID = createField(DSL.name("creatorId"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>rs-parking-node.regular_visits.dropperId</code>.
     */
    public final TableField<RegularVisitsRecord, Long> DROPPERID = createField(DSL.name("dropperId"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>rs-parking-node.regular_visits.regularCarId</code>.
     */
    public final TableField<RegularVisitsRecord, String> REGULARCARID = createField(DSL.name("regularCarId"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.regular_visits.visitId</code>.
     */
    public final TableField<RegularVisitsRecord, Long> VISITID = createField(DSL.name("visitId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>rs-parking-node.regular_visits</code> table reference
     */
    public RegularVisits() {
        this(DSL.name("regular_visits"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.regular_visits</code> table reference
     */
    public RegularVisits(String alias) {
        this(DSL.name(alias), REGULAR_VISITS);
    }

    /**
     * Create an aliased <code>rs-parking-node.regular_visits</code> table reference
     */
    public RegularVisits(Name alias) {
        this(alias, REGULAR_VISITS);
    }

    private RegularVisits(Name alias, Table<RegularVisitsRecord> aliased) {
        this(alias, aliased, null);
    }

    private RegularVisits(Name alias, Table<RegularVisitsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RegularVisits(Table<O> child, ForeignKey<O, RegularVisitsRecord> key) {
        super(child, key, REGULAR_VISITS);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public UniqueKey<RegularVisitsRecord> getPrimaryKey() {
        return Keys.KEY_REGULAR_VISITS_PRIMARY;
    }

    @Override
    public List<UniqueKey<RegularVisitsRecord>> getKeys() {
        return Arrays.<UniqueKey<RegularVisitsRecord>>asList(Keys.KEY_REGULAR_VISITS_PRIMARY);
    }

    @Override
    public List<ForeignKey<RegularVisitsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RegularVisitsRecord, ?>>asList(Keys.FK6QSGE3RNO1SIFOG6FQ6MSXJGA, Keys.FK52386ELJAP8NK8KQS5BODT0IY, Keys.FKD8RW63IHRUGBH7B8R1SBDO169, Keys.FK3Y7FTUR9JY93BEETQW0GKHW44);
    }

    public Members fk6qsge3rno1sifog6fq6msxjga() {
        return new Members(this, Keys.FK6QSGE3RNO1SIFOG6FQ6MSXJGA);
    }

    public Members fk52386eljap8nk8kqs5bodt0iy() {
        return new Members(this, Keys.FK52386ELJAP8NK8KQS5BODT0IY);
    }

    public RegularCars regularCars() {
        return new RegularCars(this, Keys.FKD8RW63IHRUGBH7B8R1SBDO169);
    }

    public Visits visits() {
        return new Visits(this, Keys.FK3Y7FTUR9JY93BEETQW0GKHW44);
    }

    @Override
    public RegularVisits as(String alias) {
        return new RegularVisits(DSL.name(alias), this);
    }

    @Override
    public RegularVisits as(Name alias) {
        return new RegularVisits(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RegularVisits rename(String name) {
        return new RegularVisits(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RegularVisits rename(Name name) {
        return new RegularVisits(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, LocalDateTime, BigDecimal, LocalDateTime, Long, Long, String, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
