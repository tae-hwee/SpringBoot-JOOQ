/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Indexes;
import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.PaymentsRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Payments extends TableImpl<PaymentsRecord> {

    private static final long serialVersionUID = -528274474;

    /**
     * The reference instance of <code>rs-parking-node.payments</code>
     */
    public static final Payments PAYMENTS = new Payments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentsRecord> getRecordType() {
        return PaymentsRecord.class;
    }

    /**
     * The column <code>rs-parking-node.payments.paymentId</code>.
     */
    public final TableField<PaymentsRecord, String> PAYMENTID = createField(DSL.name("paymentId"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.payments.target</code>.
     */
    public final TableField<PaymentsRecord, String> TARGET = createField(DSL.name("target"), org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.payments.status</code>.
     */
    public final TableField<PaymentsRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.payments.payAmount</code>.
     */
    public final TableField<PaymentsRecord, BigDecimal> PAYAMOUNT = createField(DSL.name("payAmount"), org.jooq.impl.SQLDataType.DECIMAL(19, 2).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.payments.refunedAmount</code>.
     */
    public final TableField<PaymentsRecord, BigDecimal> REFUNEDAMOUNT = createField(DSL.name("refunedAmount"), org.jooq.impl.SQLDataType.DECIMAL(19, 2).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>rs-parking-node.payments.payerId</code>.
     */
    public final TableField<PaymentsRecord, Long> PAYERID = createField(DSL.name("payerId"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>rs-parking-node.payments.created</code>.
     */
    public final TableField<PaymentsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.payments.payed</code>.
     */
    public final TableField<PaymentsRecord, LocalDateTime> PAYED = createField(DSL.name("payed"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.payments.lastUpdaterId</code>.
     */
    public final TableField<PaymentsRecord, Long> LASTUPDATERID = createField(DSL.name("lastUpdaterId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.payments.lastUpdated</code>.
     */
    public final TableField<PaymentsRecord, LocalDateTime> LASTUPDATED = createField(DSL.name("lastUpdated"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.payments.details</code>.
     */
    public final TableField<PaymentsRecord, String> DETAILS = createField(DSL.name("details"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>rs-parking-node.payments.refundedAmount</code>.
     */
    public final TableField<PaymentsRecord, BigDecimal> REFUNDEDAMOUNT = createField(DSL.name("refundedAmount"), org.jooq.impl.SQLDataType.DECIMAL(19, 2).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>rs-parking-node.payments.seasonTicketHistoryId</code>.
     */
    public final TableField<PaymentsRecord, String> SEASONTICKETHISTORYID = createField(DSL.name("seasonTicketHistoryId"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.payments.visitId</code>.
     */
    public final TableField<PaymentsRecord, Long> VISITID = createField(DSL.name("visitId"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>rs-parking-node.payments.visitCouponBookId</code>.
     */
    public final TableField<PaymentsRecord, Long> VISITCOUPONBOOKID = createField(DSL.name("visitCouponBookId"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>rs-parking-node.payments.paymentType</code>.
     */
    public final TableField<PaymentsRecord, String> PAYMENTTYPE = createField(DSL.name("paymentType"), org.jooq.impl.SQLDataType.VARCHAR(16).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.payments.payInfoHistories</code>.
     */
    public final TableField<PaymentsRecord, String> PAYINFOHISTORIES = createField(DSL.name("payInfoHistories"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>rs-parking-node.payments.umid</code>.
     */
    public final TableField<PaymentsRecord, String> UMID = createField(DSL.name("umid"), org.jooq.impl.SQLDataType.CHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>rs-parking-node.payments.visitCouponGroupId</code>.
     */
    public final TableField<PaymentsRecord, Long> VISITCOUPONGROUPID = createField(DSL.name("visitCouponGroupId"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>rs-parking-node.payments</code> table reference
     */
    public Payments() {
        this(DSL.name("payments"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.payments</code> table reference
     */
    public Payments(String alias) {
        this(DSL.name(alias), PAYMENTS);
    }

    /**
     * Create an aliased <code>rs-parking-node.payments</code> table reference
     */
    public Payments(Name alias) {
        this(alias, PAYMENTS);
    }

    private Payments(Name alias, Table<PaymentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Payments(Name alias, Table<PaymentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Payments(Table<O> child, ForeignKey<O, PaymentsRecord> key) {
        super(child, key, PAYMENTS);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PAYMENTS_FKLR5DLS0OAQHUVG005YKYWLU1U);
    }

    @Override
    public UniqueKey<PaymentsRecord> getPrimaryKey() {
        return Keys.KEY_PAYMENTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<PaymentsRecord>> getKeys() {
        return Arrays.<UniqueKey<PaymentsRecord>>asList(Keys.KEY_PAYMENTS_PRIMARY, Keys.KEY_PAYMENTS_UK_3JYIHPWQS73VEN83GLSQJ5TTH);
    }

    @Override
    public List<ForeignKey<PaymentsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PaymentsRecord, ?>>asList(Keys.FK_PAYERID, Keys.FK_LASTUPDATERID, Keys.FKRAM7Y5WRUD1HSYR07CJHR3LQP, Keys.FKIYBC4DHUM7CHNHGP9THIQ7R1O);
    }

    public Members fkPayerid() {
        return new Members(this, Keys.FK_PAYERID);
    }

    public Members fkLastupdaterid() {
        return new Members(this, Keys.FK_LASTUPDATERID);
    }

    public Visits visits() {
        return new Visits(this, Keys.FKRAM7Y5WRUD1HSYR07CJHR3LQP);
    }

    public VisitCouponBooks visitCouponBooks() {
        return new VisitCouponBooks(this, Keys.FKIYBC4DHUM7CHNHGP9THIQ7R1O);
    }

    @Override
    public Payments as(String alias) {
        return new Payments(DSL.name(alias), this);
    }

    @Override
    public Payments as(Name alias) {
        return new Payments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Payments rename(String name) {
        return new Payments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Payments rename(Name name) {
        return new Payments(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<String, String, String, BigDecimal, BigDecimal, Long, LocalDateTime, LocalDateTime, Long, LocalDateTime, String, BigDecimal, String, Long, Long, String, String, String, Long> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
