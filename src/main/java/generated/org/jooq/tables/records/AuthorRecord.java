/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables.records;


import generated.org.jooq.tables.Author;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorRecord extends UpdatableRecordImpl<AuthorRecord> implements Record3<Long, String, String> {

    private static final long serialVersionUID = -1481323608;

    /**
     * Setter for <code>rs-parking-node.author.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>rs-parking-node.author.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>rs-parking-node.author.authorName</code>.
     */
    public void setAuthorname(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>rs-parking-node.author.authorName</code>.
     */
    public String getAuthorname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>rs-parking-node.author.penName</code>.
     */
    public void setPenname(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>rs-parking-node.author.penName</code>.
     */
    public String getPenname() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Author.AUTHOR.ID;
    }

    @Override
    public Field<String> field2() {
        return Author.AUTHOR.AUTHORNAME;
    }

    @Override
    public Field<String> field3() {
        return Author.AUTHOR.PENNAME;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getAuthorname();
    }

    @Override
    public String component3() {
        return getPenname();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getAuthorname();
    }

    @Override
    public String value3() {
        return getPenname();
    }

    @Override
    public AuthorRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AuthorRecord value2(String value) {
        setAuthorname(value);
        return this;
    }

    @Override
    public AuthorRecord value3(String value) {
        setPenname(value);
        return this;
    }

    @Override
    public AuthorRecord values(Long value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuthorRecord
     */
    public AuthorRecord() {
        super(Author.AUTHOR);
    }

    /**
     * Create a detached, initialised AuthorRecord
     */
    public AuthorRecord(Long id, String authorname, String penname) {
        super(Author.AUTHOR);

        set(0, id);
        set(1, authorname);
        set(2, penname);
    }
}
