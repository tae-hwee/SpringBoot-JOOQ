/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables.records;


import generated.org.jooq.tables.AuthorBook;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorBookRecord extends UpdatableRecordImpl<AuthorBookRecord> implements Record2<Long, Long> {

    private static final long serialVersionUID = -454045611;

    /**
     * Setter for <code>rs-parking-node.author_book.authorId</code>.
     */
    public void setAuthorid(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>rs-parking-node.author_book.authorId</code>.
     */
    public Long getAuthorid() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>rs-parking-node.author_book.bookId</code>.
     */
    public void setBookid(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>rs-parking-node.author_book.bookId</code>.
     */
    public Long getBookid() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, Long> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return AuthorBook.AUTHOR_BOOK.AUTHORID;
    }

    @Override
    public Field<Long> field2() {
        return AuthorBook.AUTHOR_BOOK.BOOKID;
    }

    @Override
    public Long component1() {
        return getAuthorid();
    }

    @Override
    public Long component2() {
        return getBookid();
    }

    @Override
    public Long value1() {
        return getAuthorid();
    }

    @Override
    public Long value2() {
        return getBookid();
    }

    @Override
    public AuthorBookRecord value1(Long value) {
        setAuthorid(value);
        return this;
    }

    @Override
    public AuthorBookRecord value2(Long value) {
        setBookid(value);
        return this;
    }

    @Override
    public AuthorBookRecord values(Long value1, Long value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuthorBookRecord
     */
    public AuthorBookRecord() {
        super(AuthorBook.AUTHOR_BOOK);
    }

    /**
     * Create a detached, initialised AuthorBookRecord
     */
    public AuthorBookRecord(Long authorid, Long bookid) {
        super(AuthorBook.AUTHOR_BOOK);

        set(0, authorid);
        set(1, bookid);
    }
}
