/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables.records;


import generated.org.jooq.tables.ParkingSpaceHistories;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ParkingSpaceHistoriesRecord extends UpdatableRecordImpl<ParkingSpaceHistoriesRecord> implements Record7<Long, Boolean, LocalDateTime, String, LocalDateTime, Double, String> {

    private static final long serialVersionUID = 2044610716;

    /**
     * Setter for <code>rs-parking-node.parking_space_histories.parkingSpaceHistoryId</code>.
     */
    public void setParkingspacehistoryid(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>rs-parking-node.parking_space_histories.parkingSpaceHistoryId</code>.
     */
    public Long getParkingspacehistoryid() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>rs-parking-node.parking_space_histories.healthy</code>.
     */
    public void setHealthy(Boolean value) {
        set(1, value);
    }

    /**
     * Getter for <code>rs-parking-node.parking_space_histories.healthy</code>.
     */
    public Boolean getHealthy() {
        return (Boolean) get(1);
    }

    /**
     * Setter for <code>rs-parking-node.parking_space_histories.lastDeviceUpdated</code>.
     */
    public void setLastdeviceupdated(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>rs-parking-node.parking_space_histories.lastDeviceUpdated</code>.
     */
    public LocalDateTime getLastdeviceupdated() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>rs-parking-node.parking_space_histories.lpn</code>.
     */
    public void setLpn(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>rs-parking-node.parking_space_histories.lpn</code>.
     */
    public String getLpn() {
        return (String) get(3);
    }

    /**
     * Setter for <code>rs-parking-node.parking_space_histories.occupied</code>.
     */
    public void setOccupied(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>rs-parking-node.parking_space_histories.occupied</code>.
     */
    public LocalDateTime getOccupied() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>rs-parking-node.parking_space_histories.sensorVoltage</code>.
     */
    public void setSensorvoltage(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>rs-parking-node.parking_space_histories.sensorVoltage</code>.
     */
    public Double getSensorvoltage() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>rs-parking-node.parking_space_histories.parkingSpaceId</code>.
     */
    public void setParkingspaceid(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>rs-parking-node.parking_space_histories.parkingSpaceId</code>.
     */
    public String getParkingspaceid() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Boolean, LocalDateTime, String, LocalDateTime, Double, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, Boolean, LocalDateTime, String, LocalDateTime, Double, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return ParkingSpaceHistories.PARKING_SPACE_HISTORIES.PARKINGSPACEHISTORYID;
    }

    @Override
    public Field<Boolean> field2() {
        return ParkingSpaceHistories.PARKING_SPACE_HISTORIES.HEALTHY;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return ParkingSpaceHistories.PARKING_SPACE_HISTORIES.LASTDEVICEUPDATED;
    }

    @Override
    public Field<String> field4() {
        return ParkingSpaceHistories.PARKING_SPACE_HISTORIES.LPN;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return ParkingSpaceHistories.PARKING_SPACE_HISTORIES.OCCUPIED;
    }

    @Override
    public Field<Double> field6() {
        return ParkingSpaceHistories.PARKING_SPACE_HISTORIES.SENSORVOLTAGE;
    }

    @Override
    public Field<String> field7() {
        return ParkingSpaceHistories.PARKING_SPACE_HISTORIES.PARKINGSPACEID;
    }

    @Override
    public Long component1() {
        return getParkingspacehistoryid();
    }

    @Override
    public Boolean component2() {
        return getHealthy();
    }

    @Override
    public LocalDateTime component3() {
        return getLastdeviceupdated();
    }

    @Override
    public String component4() {
        return getLpn();
    }

    @Override
    public LocalDateTime component5() {
        return getOccupied();
    }

    @Override
    public Double component6() {
        return getSensorvoltage();
    }

    @Override
    public String component7() {
        return getParkingspaceid();
    }

    @Override
    public Long value1() {
        return getParkingspacehistoryid();
    }

    @Override
    public Boolean value2() {
        return getHealthy();
    }

    @Override
    public LocalDateTime value3() {
        return getLastdeviceupdated();
    }

    @Override
    public String value4() {
        return getLpn();
    }

    @Override
    public LocalDateTime value5() {
        return getOccupied();
    }

    @Override
    public Double value6() {
        return getSensorvoltage();
    }

    @Override
    public String value7() {
        return getParkingspaceid();
    }

    @Override
    public ParkingSpaceHistoriesRecord value1(Long value) {
        setParkingspacehistoryid(value);
        return this;
    }

    @Override
    public ParkingSpaceHistoriesRecord value2(Boolean value) {
        setHealthy(value);
        return this;
    }

    @Override
    public ParkingSpaceHistoriesRecord value3(LocalDateTime value) {
        setLastdeviceupdated(value);
        return this;
    }

    @Override
    public ParkingSpaceHistoriesRecord value4(String value) {
        setLpn(value);
        return this;
    }

    @Override
    public ParkingSpaceHistoriesRecord value5(LocalDateTime value) {
        setOccupied(value);
        return this;
    }

    @Override
    public ParkingSpaceHistoriesRecord value6(Double value) {
        setSensorvoltage(value);
        return this;
    }

    @Override
    public ParkingSpaceHistoriesRecord value7(String value) {
        setParkingspaceid(value);
        return this;
    }

    @Override
    public ParkingSpaceHistoriesRecord values(Long value1, Boolean value2, LocalDateTime value3, String value4, LocalDateTime value5, Double value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ParkingSpaceHistoriesRecord
     */
    public ParkingSpaceHistoriesRecord() {
        super(ParkingSpaceHistories.PARKING_SPACE_HISTORIES);
    }

    /**
     * Create a detached, initialised ParkingSpaceHistoriesRecord
     */
    public ParkingSpaceHistoriesRecord(Long parkingspacehistoryid, Boolean healthy, LocalDateTime lastdeviceupdated, String lpn, LocalDateTime occupied, Double sensorvoltage, String parkingspaceid) {
        super(ParkingSpaceHistories.PARKING_SPACE_HISTORIES);

        set(0, parkingspacehistoryid);
        set(1, healthy);
        set(2, lastdeviceupdated);
        set(3, lpn);
        set(4, occupied);
        set(5, sensorvoltage);
        set(6, parkingspaceid);
    }
}
