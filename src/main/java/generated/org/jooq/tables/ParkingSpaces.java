/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.ParkingSpacesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ParkingSpaces extends TableImpl<ParkingSpacesRecord> {

    private static final long serialVersionUID = 1965794306;

    /**
     * The reference instance of <code>rs-parking-node.parking_spaces</code>
     */
    public static final ParkingSpaces PARKING_SPACES = new ParkingSpaces();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParkingSpacesRecord> getRecordType() {
        return ParkingSpacesRecord.class;
    }

    /**
     * The column <code>rs-parking-node.parking_spaces.parkingSpaceId</code>.
     */
    public final TableField<ParkingSpacesRecord, String> PARKINGSPACEID = createField(DSL.name("parkingSpaceId"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.bottom</code>.
     */
    public final TableField<ParkingSpacesRecord, Double> BOTTOM = createField(DSL.name("bottom"), org.jooq.impl.SQLDataType.FLOAT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.FLOAT)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.cameraAngle</code>.
     */
    public final TableField<ParkingSpacesRecord, String> CAMERAANGLE = createField(DSL.name("cameraAngle"), org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.chargerId</code>.
     */
    public final TableField<ParkingSpacesRecord, String> CHARGERID = createField(DSL.name("chargerId"), org.jooq.impl.SQLDataType.VARCHAR(8).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.deviceSerialNo</code>.
     */
    public final TableField<ParkingSpacesRecord, String> DEVICESERIALNO = createField(DSL.name("deviceSerialNo"), org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.evChargeStatus</code>.
     */
    public final TableField<ParkingSpacesRecord, String> EVCHARGESTATUS = createField(DSL.name("evChargeStatus"), org.jooq.impl.SQLDataType.VARCHAR(16).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.healthy</code>.
     */
    public final TableField<ParkingSpacesRecord, Boolean> HEALTHY = createField(DSL.name("healthy"), org.jooq.impl.SQLDataType.BIT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.lastDeviceUpdated</code>.
     */
    public final TableField<ParkingSpacesRecord, LocalDateTime> LASTDEVICEUPDATED = createField(DSL.name("lastDeviceUpdated"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.lastEvChargeModified</code>.
     */
    public final TableField<ParkingSpacesRecord, LocalDateTime> LASTEVCHARGEMODIFIED = createField(DSL.name("lastEvChargeModified"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.left</code>.
     */
    public final TableField<ParkingSpacesRecord, Double> LEFT = createField(DSL.name("left"), org.jooq.impl.SQLDataType.FLOAT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.FLOAT)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.lpn</code>.
     */
    public final TableField<ParkingSpacesRecord, String> LPN = createField(DSL.name("lpn"), org.jooq.impl.SQLDataType.VARCHAR(16).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.machineCode</code>.
     */
    public final TableField<ParkingSpacesRecord, String> MACHINECODE = createField(DSL.name("machineCode"), org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.name</code>.
     */
    public final TableField<ParkingSpacesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.occupied</code>.
     */
    public final TableField<ParkingSpacesRecord, LocalDateTime> OCCUPIED = createField(DSL.name("occupied"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.right</code>.
     */
    public final TableField<ParkingSpacesRecord, Double> RIGHT = createField(DSL.name("right"), org.jooq.impl.SQLDataType.FLOAT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.FLOAT)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.sectionName</code>.
     */
    public final TableField<ParkingSpacesRecord, String> SECTIONNAME = createField(DSL.name("sectionName"), org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.sectionSymbol</code>.
     */
    public final TableField<ParkingSpacesRecord, String> SECTIONSYMBOL = createField(DSL.name("sectionSymbol"), org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.subSectionName</code>.
     */
    public final TableField<ParkingSpacesRecord, String> SUBSECTIONNAME = createField(DSL.name("subSectionName"), org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.subSectionSymbol</code>.
     */
    public final TableField<ParkingSpacesRecord, String> SUBSECTIONSYMBOL = createField(DSL.name("subSectionSymbol"), org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.top</code>.
     */
    public final TableField<ParkingSpacesRecord, Double> TOP = createField(DSL.name("top"), org.jooq.impl.SQLDataType.FLOAT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.FLOAT)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.cameraId</code>.
     */
    public final TableField<ParkingSpacesRecord, String> CAMERAID = createField(DSL.name("cameraId"), org.jooq.impl.SQLDataType.CHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.districtId</code>.
     */
    public final TableField<ParkingSpacesRecord, Long> DISTRICTID = createField(DSL.name("districtId"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.sensorAge</code>.
     */
    public final TableField<ParkingSpacesRecord, Integer> SENSORAGE = createField(DSL.name("sensorAge"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.sensorTemp</code>.
     */
    public final TableField<ParkingSpacesRecord, Integer> SENSORTEMP = createField(DSL.name("sensorTemp"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>rs-parking-node.parking_spaces.sensorVoltage</code>.
     */
    public final TableField<ParkingSpacesRecord, Double> SENSORVOLTAGE = createField(DSL.name("sensorVoltage"), org.jooq.impl.SQLDataType.DOUBLE.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.DOUBLE)), this, "");

    /**
     * Create a <code>rs-parking-node.parking_spaces</code> table reference
     */
    public ParkingSpaces() {
        this(DSL.name("parking_spaces"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.parking_spaces</code> table reference
     */
    public ParkingSpaces(String alias) {
        this(DSL.name(alias), PARKING_SPACES);
    }

    /**
     * Create an aliased <code>rs-parking-node.parking_spaces</code> table reference
     */
    public ParkingSpaces(Name alias) {
        this(alias, PARKING_SPACES);
    }

    private ParkingSpaces(Name alias, Table<ParkingSpacesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ParkingSpaces(Name alias, Table<ParkingSpacesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ParkingSpaces(Table<O> child, ForeignKey<O, ParkingSpacesRecord> key) {
        super(child, key, PARKING_SPACES);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public UniqueKey<ParkingSpacesRecord> getPrimaryKey() {
        return Keys.KEY_PARKING_SPACES_PRIMARY;
    }

    @Override
    public List<UniqueKey<ParkingSpacesRecord>> getKeys() {
        return Arrays.<UniqueKey<ParkingSpacesRecord>>asList(Keys.KEY_PARKING_SPACES_PRIMARY, Keys.KEY_PARKING_SPACES_UKIMOPTPDIPXCS55TJY9P0V4YXY, Keys.KEY_PARKING_SPACES_UK_D2TF80NI90QLUGRAJ18CX0M9M, Keys.KEY_PARKING_SPACES_UK_JXF8WMTPXWQ4525UPQK9QVH2S);
    }

    @Override
    public List<ForeignKey<ParkingSpacesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ParkingSpacesRecord, ?>>asList(Keys.FK43H4XWB5K3IT82Y8ORWA3XALN, Keys.FKR8Q3DHY14IOL16XBKSA8J22UL);
    }

    public Cameras cameras() {
        return new Cameras(this, Keys.FK43H4XWB5K3IT82Y8ORWA3XALN);
    }

    public Districts districts() {
        return new Districts(this, Keys.FKR8Q3DHY14IOL16XBKSA8J22UL);
    }

    @Override
    public ParkingSpaces as(String alias) {
        return new ParkingSpaces(DSL.name(alias), this);
    }

    @Override
    public ParkingSpaces as(Name alias) {
        return new ParkingSpaces(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ParkingSpaces rename(String name) {
        return new ParkingSpaces(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ParkingSpaces rename(Name name) {
        return new ParkingSpaces(name, null);
    }
}
