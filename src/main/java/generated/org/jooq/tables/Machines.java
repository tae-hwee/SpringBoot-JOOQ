/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.MachinesRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Machines extends TableImpl<MachinesRecord> {

    private static final long serialVersionUID = -749636962;

    /**
     * The reference instance of <code>rs-parking-node.machines</code>
     */
    public static final Machines MACHINES = new Machines();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MachinesRecord> getRecordType() {
        return MachinesRecord.class;
    }

    /**
     * The column <code>rs-parking-node.machines.machineId</code>.
     */
    public final TableField<MachinesRecord, Long> MACHINEID = createField(DSL.name("machineId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rs-parking-node.machines.code</code>.
     */
    public final TableField<MachinesRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.machines.details</code>.
     */
    public final TableField<MachinesRecord, String> DETAILS = createField(DSL.name("details"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>rs-parking-node.machines.devices</code>.
     */
    public final TableField<MachinesRecord, String> DEVICES = createField(DSL.name("devices"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>rs-parking-node.machines.dropped</code>.
     */
    public final TableField<MachinesRecord, LocalDateTime> DROPPED = createField(DSL.name("dropped"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.machines.name</code>.
     */
    public final TableField<MachinesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.machines.protocol</code>.
     */
    public final TableField<MachinesRecord, String> PROTOCOL = createField(DSL.name("protocol"), org.jooq.impl.SQLDataType.VARCHAR(16).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.machines.type</code>.
     */
    public final TableField<MachinesRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(16).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.machines.districtId</code>.
     */
    public final TableField<MachinesRecord, Long> DISTRICTID = createField(DSL.name("districtId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.machines.apiKey</code>.
     */
    public final TableField<MachinesRecord, String> APIKEY = createField(DSL.name("apiKey"), org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.machines.sshPrivateKey</code>.
     */
    public final TableField<MachinesRecord, String> SSHPRIVATEKEY = createField(DSL.name("sshPrivateKey"), org.jooq.impl.SQLDataType.VARCHAR(1024).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.machines.description</code>.
     */
    public final TableField<MachinesRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(2048).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.machines.lat</code>.
     */
    public final TableField<MachinesRecord, BigDecimal> LAT = createField(DSL.name("lat"), org.jooq.impl.SQLDataType.DECIMAL(10, 7).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>rs-parking-node.machines.lon</code>.
     */
    public final TableField<MachinesRecord, BigDecimal> LON = createField(DSL.name("lon"), org.jooq.impl.SQLDataType.DECIMAL(10, 7).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>rs-parking-node.machines.poi</code>.
     */
    public final TableField<MachinesRecord, String> POI = createField(DSL.name("poi"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>rs-parking-node.machines.status</code>.
     */
    public final TableField<MachinesRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(16).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.machines.cashBox</code>.
     */
    public final TableField<MachinesRecord, String> CASHBOX = createField(DSL.name("cashBox"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>rs-parking-node.machines.created</code>.
     */
    public final TableField<MachinesRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.machines.lastUpdated</code>.
     */
    public final TableField<MachinesRecord, LocalDateTime> LASTUPDATED = createField(DSL.name("lastUpdated"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.machines.umid</code>.
     */
    public final TableField<MachinesRecord, String> UMID = createField(DSL.name("umid"), org.jooq.impl.SQLDataType.CHAR(16).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * Create a <code>rs-parking-node.machines</code> table reference
     */
    public Machines() {
        this(DSL.name("machines"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.machines</code> table reference
     */
    public Machines(String alias) {
        this(DSL.name(alias), MACHINES);
    }

    /**
     * Create an aliased <code>rs-parking-node.machines</code> table reference
     */
    public Machines(Name alias) {
        this(alias, MACHINES);
    }

    private Machines(Name alias, Table<MachinesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Machines(Name alias, Table<MachinesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Machines(Table<O> child, ForeignKey<O, MachinesRecord> key) {
        super(child, key, MACHINES);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public Identity<MachinesRecord, Long> getIdentity() {
        return Keys.IDENTITY_MACHINES;
    }

    @Override
    public UniqueKey<MachinesRecord> getPrimaryKey() {
        return Keys.KEY_MACHINES_PRIMARY;
    }

    @Override
    public List<UniqueKey<MachinesRecord>> getKeys() {
        return Arrays.<UniqueKey<MachinesRecord>>asList(Keys.KEY_MACHINES_PRIMARY, Keys.KEY_MACHINES_UK_DWWLQB72EXGO4PX8E7GYM6MHH, Keys.KEY_MACHINES_UK_N1UPD1RG8D4XMQGWIXQ7C1FM0);
    }

    @Override
    public List<ForeignKey<MachinesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MachinesRecord, ?>>asList(Keys.FKJ62WRNUR16BPD7SU4NWVQ96VQ);
    }

    public Districts districts() {
        return new Districts(this, Keys.FKJ62WRNUR16BPD7SU4NWVQ96VQ);
    }

    @Override
    public Machines as(String alias) {
        return new Machines(DSL.name(alias), this);
    }

    @Override
    public Machines as(Name alias) {
        return new Machines(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Machines rename(String name) {
        return new Machines(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Machines rename(Name name) {
        return new Machines(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<Long, String, String, String, LocalDateTime, String, String, String, Long, String, String, String, BigDecimal, BigDecimal, String, String, String, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
