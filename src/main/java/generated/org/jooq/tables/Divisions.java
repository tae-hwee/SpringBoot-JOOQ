/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.DivisionsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Divisions extends TableImpl<DivisionsRecord> {

    private static final long serialVersionUID = 1573226446;

    /**
     * The reference instance of <code>rs-parking-node.divisions</code>
     */
    public static final Divisions DIVISIONS = new Divisions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DivisionsRecord> getRecordType() {
        return DivisionsRecord.class;
    }

    /**
     * The column <code>rs-parking-node.divisions.divisionId</code>.
     */
    public final TableField<DivisionsRecord, Long> DIVISIONID = createField(DSL.name("divisionId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rs-parking-node.divisions.name</code>.
     */
    public final TableField<DivisionsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * Create a <code>rs-parking-node.divisions</code> table reference
     */
    public Divisions() {
        this(DSL.name("divisions"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.divisions</code> table reference
     */
    public Divisions(String alias) {
        this(DSL.name(alias), DIVISIONS);
    }

    /**
     * Create an aliased <code>rs-parking-node.divisions</code> table reference
     */
    public Divisions(Name alias) {
        this(alias, DIVISIONS);
    }

    private Divisions(Name alias, Table<DivisionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Divisions(Name alias, Table<DivisionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Divisions(Table<O> child, ForeignKey<O, DivisionsRecord> key) {
        super(child, key, DIVISIONS);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public Identity<DivisionsRecord, Long> getIdentity() {
        return Keys.IDENTITY_DIVISIONS;
    }

    @Override
    public UniqueKey<DivisionsRecord> getPrimaryKey() {
        return Keys.KEY_DIVISIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<DivisionsRecord>> getKeys() {
        return Arrays.<UniqueKey<DivisionsRecord>>asList(Keys.KEY_DIVISIONS_PRIMARY);
    }

    @Override
    public Divisions as(String alias) {
        return new Divisions(DSL.name(alias), this);
    }

    @Override
    public Divisions as(Name alias) {
        return new Divisions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Divisions rename(String name) {
        return new Divisions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Divisions rename(Name name) {
        return new Divisions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
