/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.ExitChargeFreesRecord;

import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExitChargeFrees extends TableImpl<ExitChargeFreesRecord> {

    private static final long serialVersionUID = 480782943;

    /**
     * The reference instance of <code>rs-parking-node.exit_charge_frees</code>
     */
    public static final ExitChargeFrees EXIT_CHARGE_FREES = new ExitChargeFrees();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExitChargeFreesRecord> getRecordType() {
        return ExitChargeFreesRecord.class;
    }

    /**
     * The column <code>rs-parking-node.exit_charge_frees.eixitChargeFreeId</code>.
     */
    public final TableField<ExitChargeFreesRecord, Long> EIXITCHARGEFREEID = createField(DSL.name("eixitChargeFreeId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rs-parking-node.exit_charge_frees.active</code>.
     */
    public final TableField<ExitChargeFreesRecord, String> ACTIVE = createField(DSL.name("active"), org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.exit_charge_frees.end</code>.
     */
    public final TableField<ExitChargeFreesRecord, LocalTime> END = createField(DSL.name("end"), org.jooq.impl.SQLDataType.LOCALTIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.exit_charge_frees.name</code>.
     */
    public final TableField<ExitChargeFreesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.exit_charge_frees.start</code>.
     */
    public final TableField<ExitChargeFreesRecord, LocalTime> START = createField(DSL.name("start"), org.jooq.impl.SQLDataType.LOCALTIME.nullable(false), this, "");

    /**
     * Create a <code>rs-parking-node.exit_charge_frees</code> table reference
     */
    public ExitChargeFrees() {
        this(DSL.name("exit_charge_frees"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.exit_charge_frees</code> table reference
     */
    public ExitChargeFrees(String alias) {
        this(DSL.name(alias), EXIT_CHARGE_FREES);
    }

    /**
     * Create an aliased <code>rs-parking-node.exit_charge_frees</code> table reference
     */
    public ExitChargeFrees(Name alias) {
        this(alias, EXIT_CHARGE_FREES);
    }

    private ExitChargeFrees(Name alias, Table<ExitChargeFreesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExitChargeFrees(Name alias, Table<ExitChargeFreesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ExitChargeFrees(Table<O> child, ForeignKey<O, ExitChargeFreesRecord> key) {
        super(child, key, EXIT_CHARGE_FREES);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public Identity<ExitChargeFreesRecord, Long> getIdentity() {
        return Keys.IDENTITY_EXIT_CHARGE_FREES;
    }

    @Override
    public UniqueKey<ExitChargeFreesRecord> getPrimaryKey() {
        return Keys.KEY_EXIT_CHARGE_FREES_PRIMARY;
    }

    @Override
    public List<UniqueKey<ExitChargeFreesRecord>> getKeys() {
        return Arrays.<UniqueKey<ExitChargeFreesRecord>>asList(Keys.KEY_EXIT_CHARGE_FREES_PRIMARY);
    }

    @Override
    public ExitChargeFrees as(String alias) {
        return new ExitChargeFrees(DSL.name(alias), this);
    }

    @Override
    public ExitChargeFrees as(Name alias) {
        return new ExitChargeFrees(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExitChargeFrees rename(String name) {
        return new ExitChargeFrees(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExitChargeFrees rename(Name name) {
        return new ExitChargeFrees(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, LocalTime, String, LocalTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
