/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.RegularCarsRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RegularCars extends TableImpl<RegularCarsRecord> {

    private static final long serialVersionUID = -1981418996;

    /**
     * The reference instance of <code>rs-parking-node.regular_cars</code>
     */
    public static final RegularCars REGULAR_CARS = new RegularCars();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegularCarsRecord> getRecordType() {
        return RegularCarsRecord.class;
    }

    /**
     * The column <code>rs-parking-node.regular_cars.id</code>.
     */
    public final TableField<RegularCarsRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.regular_cars.activated</code>.
     */
    public final TableField<RegularCarsRecord, String> ACTIVATED = createField(DSL.name("activated"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>rs-parking-node.regular_cars.created</code>.
     */
    public final TableField<RegularCarsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.regular_cars.dropped</code>.
     */
    public final TableField<RegularCarsRecord, LocalDateTime> DROPPED = createField(DSL.name("dropped"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.regular_cars.lpn</code>.
     */
    public final TableField<RegularCarsRecord, String> LPN = createField(DSL.name("lpn"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.regular_cars.maxCountPerMonth</code>.
     */
    public final TableField<RegularCarsRecord, Integer> MAXCOUNTPERMONTH = createField(DSL.name("maxCountPerMonth"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>rs-parking-node.regular_cars.maxDiscountPerDay</code>.
     */
    public final TableField<RegularCarsRecord, BigDecimal> MAXDISCOUNTPERDAY = createField(DSL.name("maxDiscountPerDay"), org.jooq.impl.SQLDataType.DECIMAL(11, 2).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>rs-parking-node.regular_cars.maxDiscountPerMonth</code>.
     */
    public final TableField<RegularCarsRecord, BigDecimal> MAXDISCOUNTPERMONTH = createField(DSL.name("maxDiscountPerMonth"), org.jooq.impl.SQLDataType.DECIMAL(11, 2).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>rs-parking-node.regular_cars.overLimitEnter</code>.
     */
    public final TableField<RegularCarsRecord, String> OVERLIMITENTER = createField(DSL.name("overLimitEnter"), org.jooq.impl.SQLDataType.VARCHAR(16).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.regular_cars.creatorId</code>.
     */
    public final TableField<RegularCarsRecord, Long> CREATORID = createField(DSL.name("creatorId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.regular_cars.districtId</code>.
     */
    public final TableField<RegularCarsRecord, Long> DISTRICTID = createField(DSL.name("districtId"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>rs-parking-node.regular_cars.dropperId</code>.
     */
    public final TableField<RegularCarsRecord, Long> DROPPERID = createField(DSL.name("dropperId"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>rs-parking-node.regular_cars.memberId</code>.
     */
    public final TableField<RegularCarsRecord, Long> MEMBERID = createField(DSL.name("memberId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>rs-parking-node.regular_cars</code> table reference
     */
    public RegularCars() {
        this(DSL.name("regular_cars"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.regular_cars</code> table reference
     */
    public RegularCars(String alias) {
        this(DSL.name(alias), REGULAR_CARS);
    }

    /**
     * Create an aliased <code>rs-parking-node.regular_cars</code> table reference
     */
    public RegularCars(Name alias) {
        this(alias, REGULAR_CARS);
    }

    private RegularCars(Name alias, Table<RegularCarsRecord> aliased) {
        this(alias, aliased, null);
    }

    private RegularCars(Name alias, Table<RegularCarsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RegularCars(Table<O> child, ForeignKey<O, RegularCarsRecord> key) {
        super(child, key, REGULAR_CARS);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public UniqueKey<RegularCarsRecord> getPrimaryKey() {
        return Keys.KEY_REGULAR_CARS_PRIMARY;
    }

    @Override
    public List<UniqueKey<RegularCarsRecord>> getKeys() {
        return Arrays.<UniqueKey<RegularCarsRecord>>asList(Keys.KEY_REGULAR_CARS_PRIMARY);
    }

    @Override
    public List<ForeignKey<RegularCarsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RegularCarsRecord, ?>>asList(Keys.FK8EA4CA14SL8K75CF6WMIC4QPT, Keys.FKILJWMBOB4RD1I7X5GSQDLBOPH, Keys.FKM6VHGXTIW32NNNE4NP1IP4TLQ, Keys.FKOBK2N7Y2NKIC1VHH5B169HSJB);
    }

    public Members fk8ea4ca14sl8k75cf6wmic4qpt() {
        return new Members(this, Keys.FK8EA4CA14SL8K75CF6WMIC4QPT);
    }

    public Districts districts() {
        return new Districts(this, Keys.FKILJWMBOB4RD1I7X5GSQDLBOPH);
    }

    public Members fkm6vhgxtiw32nnne4np1ip4tlq() {
        return new Members(this, Keys.FKM6VHGXTIW32NNNE4NP1IP4TLQ);
    }

    public Members fkobk2n7y2nkic1vhh5b169hsjb() {
        return new Members(this, Keys.FKOBK2N7Y2NKIC1VHH5B169HSJB);
    }

    @Override
    public RegularCars as(String alias) {
        return new RegularCars(DSL.name(alias), this);
    }

    @Override
    public RegularCars as(Name alias) {
        return new RegularCars(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RegularCars rename(String name) {
        return new RegularCars(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RegularCars rename(Name name) {
        return new RegularCars(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, String, LocalDateTime, LocalDateTime, String, Integer, BigDecimal, BigDecimal, String, Long, Long, Long, Long> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
