/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.NoticesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Notices extends TableImpl<NoticesRecord> {

    private static final long serialVersionUID = 1227622305;

    /**
     * The reference instance of <code>rs-parking-node.notices</code>
     */
    public static final Notices NOTICES = new Notices();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NoticesRecord> getRecordType() {
        return NoticesRecord.class;
    }

    /**
     * The column <code>rs-parking-node.notices.noticeId</code>.
     */
    public final TableField<NoticesRecord, Long> NOTICEID = createField(DSL.name("noticeId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rs-parking-node.notices.contents</code>.
     */
    public final TableField<NoticesRecord, String> CONTENTS = createField(DSL.name("contents"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.notices.created</code>.
     */
    public final TableField<NoticesRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.notices.end</code>.
     */
    public final TableField<NoticesRecord, LocalDateTime> END = createField(DSL.name("end"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.notices.hidden</code>.
     */
    public final TableField<NoticesRecord, String> HIDDEN = createField(DSL.name("hidden"), org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.notices.priority</code>.
     */
    public final TableField<NoticesRecord, Long> PRIORITY = createField(DSL.name("priority"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>rs-parking-node.notices.start</code>.
     */
    public final TableField<NoticesRecord, LocalDateTime> START = createField(DSL.name("start"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.notices.title</code>.
     */
    public final TableField<NoticesRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.notices.creatorId</code>.
     */
    public final TableField<NoticesRecord, Long> CREATORID = createField(DSL.name("creatorId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>rs-parking-node.notices</code> table reference
     */
    public Notices() {
        this(DSL.name("notices"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.notices</code> table reference
     */
    public Notices(String alias) {
        this(DSL.name(alias), NOTICES);
    }

    /**
     * Create an aliased <code>rs-parking-node.notices</code> table reference
     */
    public Notices(Name alias) {
        this(alias, NOTICES);
    }

    private Notices(Name alias, Table<NoticesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Notices(Name alias, Table<NoticesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Notices(Table<O> child, ForeignKey<O, NoticesRecord> key) {
        super(child, key, NOTICES);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public Identity<NoticesRecord, Long> getIdentity() {
        return Keys.IDENTITY_NOTICES;
    }

    @Override
    public UniqueKey<NoticesRecord> getPrimaryKey() {
        return Keys.KEY_NOTICES_PRIMARY;
    }

    @Override
    public List<UniqueKey<NoticesRecord>> getKeys() {
        return Arrays.<UniqueKey<NoticesRecord>>asList(Keys.KEY_NOTICES_PRIMARY);
    }

    @Override
    public List<ForeignKey<NoticesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NoticesRecord, ?>>asList(Keys.FKG05YUBKJ77HR17UBXEIKBYFDS);
    }

    public Members members() {
        return new Members(this, Keys.FKG05YUBKJ77HR17UBXEIKBYFDS);
    }

    @Override
    public Notices as(String alias) {
        return new Notices(DSL.name(alias), this);
    }

    @Override
    public Notices as(Name alias) {
        return new Notices(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Notices rename(String name) {
        return new Notices(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notices rename(Name name) {
        return new Notices(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, LocalDateTime, LocalDateTime, String, Long, LocalDateTime, String, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
