/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.DesignatedChargePlansRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DesignatedChargePlans extends TableImpl<DesignatedChargePlansRecord> {

    private static final long serialVersionUID = 844732409;

    /**
     * The reference instance of <code>rs-parking-node.designated_charge_plans</code>
     */
    public static final DesignatedChargePlans DESIGNATED_CHARGE_PLANS = new DesignatedChargePlans();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DesignatedChargePlansRecord> getRecordType() {
        return DesignatedChargePlansRecord.class;
    }

    /**
     * The column <code>rs-parking-node.designated_charge_plans.designatedChargePlanId</code>.
     */
    public final TableField<DesignatedChargePlansRecord, Long> DESIGNATEDCHARGEPLANID = createField(DSL.name("designatedChargePlanId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rs-parking-node.designated_charge_plans.end</code>.
     */
    public final TableField<DesignatedChargePlansRecord, LocalDateTime> END = createField(DSL.name("end"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.designated_charge_plans.start</code>.
     */
    public final TableField<DesignatedChargePlansRecord, LocalDateTime> START = createField(DSL.name("start"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.designated_charge_plans.steps</code>.
     */
    public final TableField<DesignatedChargePlansRecord, String> STEPS = createField(DSL.name("steps"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>rs-parking-node.designated_charge_plans.districtId</code>.
     */
    public final TableField<DesignatedChargePlansRecord, Long> DISTRICTID = createField(DSL.name("districtId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.designated_charge_plans.title</code>.
     */
    public final TableField<DesignatedChargePlansRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.designated_charge_plans.breakTimes</code>.
     */
    public final TableField<DesignatedChargePlansRecord, String> BREAKTIMES = createField(DSL.name("breakTimes"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * Create a <code>rs-parking-node.designated_charge_plans</code> table reference
     */
    public DesignatedChargePlans() {
        this(DSL.name("designated_charge_plans"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.designated_charge_plans</code> table reference
     */
    public DesignatedChargePlans(String alias) {
        this(DSL.name(alias), DESIGNATED_CHARGE_PLANS);
    }

    /**
     * Create an aliased <code>rs-parking-node.designated_charge_plans</code> table reference
     */
    public DesignatedChargePlans(Name alias) {
        this(alias, DESIGNATED_CHARGE_PLANS);
    }

    private DesignatedChargePlans(Name alias, Table<DesignatedChargePlansRecord> aliased) {
        this(alias, aliased, null);
    }

    private DesignatedChargePlans(Name alias, Table<DesignatedChargePlansRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DesignatedChargePlans(Table<O> child, ForeignKey<O, DesignatedChargePlansRecord> key) {
        super(child, key, DESIGNATED_CHARGE_PLANS);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public Identity<DesignatedChargePlansRecord, Long> getIdentity() {
        return Keys.IDENTITY_DESIGNATED_CHARGE_PLANS;
    }

    @Override
    public UniqueKey<DesignatedChargePlansRecord> getPrimaryKey() {
        return Keys.KEY_DESIGNATED_CHARGE_PLANS_PRIMARY;
    }

    @Override
    public List<UniqueKey<DesignatedChargePlansRecord>> getKeys() {
        return Arrays.<UniqueKey<DesignatedChargePlansRecord>>asList(Keys.KEY_DESIGNATED_CHARGE_PLANS_PRIMARY, Keys.KEY_DESIGNATED_CHARGE_PLANS_UK_GHCY5W6NA09P44BYWCHR8HPCK);
    }

    @Override
    public List<ForeignKey<DesignatedChargePlansRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DesignatedChargePlansRecord, ?>>asList(Keys.FK53G6DBUPAU9AC8GIXT7JYH12H);
    }

    public Districts districts() {
        return new Districts(this, Keys.FK53G6DBUPAU9AC8GIXT7JYH12H);
    }

    @Override
    public DesignatedChargePlans as(String alias) {
        return new DesignatedChargePlans(DSL.name(alias), this);
    }

    @Override
    public DesignatedChargePlans as(Name alias) {
        return new DesignatedChargePlans(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DesignatedChargePlans rename(String name) {
        return new DesignatedChargePlans(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DesignatedChargePlans rename(Name name) {
        return new DesignatedChargePlans(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, LocalDateTime, LocalDateTime, String, Long, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
