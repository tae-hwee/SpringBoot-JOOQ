/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.DepartmentsRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Departments extends TableImpl<DepartmentsRecord> {

    private static final long serialVersionUID = 1454152230;

    /**
     * The reference instance of <code>rs-parking-node.departments</code>
     */
    public static final Departments DEPARTMENTS = new Departments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DepartmentsRecord> getRecordType() {
        return DepartmentsRecord.class;
    }

    /**
     * The column <code>rs-parking-node.departments.departmentId</code>.
     */
    public final TableField<DepartmentsRecord, Long> DEPARTMENTID = createField(DSL.name("departmentId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rs-parking-node.departments.created</code>.
     */
    public final TableField<DepartmentsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.departments.initAmount</code>.
     */
    public final TableField<DepartmentsRecord, BigDecimal> INITAMOUNT = createField(DSL.name("initAmount"), org.jooq.impl.SQLDataType.DECIMAL(19, 2).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>rs-parking-node.departments.maxCouponCount</code>.
     */
    public final TableField<DepartmentsRecord, Integer> MAXCOUPONCOUNT = createField(DSL.name("maxCouponCount"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>rs-parking-node.departments.month</code>.
     */
    public final TableField<DepartmentsRecord, String> MONTH = createField(DSL.name("month"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.departments.residualAmount</code>.
     */
    public final TableField<DepartmentsRecord, BigDecimal> RESIDUALAMOUNT = createField(DSL.name("residualAmount"), org.jooq.impl.SQLDataType.DECIMAL(19, 2).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>rs-parking-node.departments.status</code>.
     */
    public final TableField<DepartmentsRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.departments.memberId</code>.
     */
    public final TableField<DepartmentsRecord, Long> MEMBERID = createField(DSL.name("memberId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.departments.visitCouponTemplateId</code>.
     */
    public final TableField<DepartmentsRecord, Long> VISITCOUPONTEMPLATEID = createField(DSL.name("visitCouponTemplateId"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>rs-parking-node.departments</code> table reference
     */
    public Departments() {
        this(DSL.name("departments"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.departments</code> table reference
     */
    public Departments(String alias) {
        this(DSL.name(alias), DEPARTMENTS);
    }

    /**
     * Create an aliased <code>rs-parking-node.departments</code> table reference
     */
    public Departments(Name alias) {
        this(alias, DEPARTMENTS);
    }

    private Departments(Name alias, Table<DepartmentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Departments(Name alias, Table<DepartmentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Departments(Table<O> child, ForeignKey<O, DepartmentsRecord> key) {
        super(child, key, DEPARTMENTS);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public Identity<DepartmentsRecord, Long> getIdentity() {
        return Keys.IDENTITY_DEPARTMENTS;
    }

    @Override
    public UniqueKey<DepartmentsRecord> getPrimaryKey() {
        return Keys.KEY_DEPARTMENTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<DepartmentsRecord>> getKeys() {
        return Arrays.<UniqueKey<DepartmentsRecord>>asList(Keys.KEY_DEPARTMENTS_PRIMARY);
    }

    @Override
    public List<ForeignKey<DepartmentsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DepartmentsRecord, ?>>asList(Keys.FK78JPR3ATMFEVXYLTCDAHUY5HK, Keys.FKOPF6BF12M3JB7CMD6NW6HJI5P);
    }

    public Members members() {
        return new Members(this, Keys.FK78JPR3ATMFEVXYLTCDAHUY5HK);
    }

    public VisitCouponTemplates visitCouponTemplates() {
        return new VisitCouponTemplates(this, Keys.FKOPF6BF12M3JB7CMD6NW6HJI5P);
    }

    @Override
    public Departments as(String alias) {
        return new Departments(DSL.name(alias), this);
    }

    @Override
    public Departments as(Name alias) {
        return new Departments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Departments rename(String name) {
        return new Departments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Departments rename(Name name) {
        return new Departments(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, LocalDateTime, BigDecimal, Integer, String, BigDecimal, String, Long, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
