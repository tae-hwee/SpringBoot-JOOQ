/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.PaymentTicketsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentTickets extends TableImpl<PaymentTicketsRecord> {

    private static final long serialVersionUID = 1452980138;

    /**
     * The reference instance of <code>rs-parking-node.payment_tickets</code>
     */
    public static final PaymentTickets PAYMENT_TICKETS = new PaymentTickets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentTicketsRecord> getRecordType() {
        return PaymentTicketsRecord.class;
    }

    /**
     * The column <code>rs-parking-node.payment_tickets.paymentTicketId</code>.
     */
    public final TableField<PaymentTicketsRecord, String> PAYMENTTICKETID = createField(DSL.name("paymentTicketId"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.payment_tickets.created</code>.
     */
    public final TableField<PaymentTicketsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.payment_tickets.details</code>.
     */
    public final TableField<PaymentTicketsRecord, String> DETAILS = createField(DSL.name("details"), org.jooq.impl.SQLDataType.VARCHAR(512).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.payment_tickets.type</code>.
     */
    public final TableField<PaymentTicketsRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.payment_tickets.validUntil</code>.
     */
    public final TableField<PaymentTicketsRecord, LocalDateTime> VALIDUNTIL = createField(DSL.name("validUntil"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.payment_tickets.memberId</code>.
     */
    public final TableField<PaymentTicketsRecord, Long> MEMBERID = createField(DSL.name("memberId"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>rs-parking-node.payment_tickets</code> table reference
     */
    public PaymentTickets() {
        this(DSL.name("payment_tickets"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.payment_tickets</code> table reference
     */
    public PaymentTickets(String alias) {
        this(DSL.name(alias), PAYMENT_TICKETS);
    }

    /**
     * Create an aliased <code>rs-parking-node.payment_tickets</code> table reference
     */
    public PaymentTickets(Name alias) {
        this(alias, PAYMENT_TICKETS);
    }

    private PaymentTickets(Name alias, Table<PaymentTicketsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PaymentTickets(Name alias, Table<PaymentTicketsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> PaymentTickets(Table<O> child, ForeignKey<O, PaymentTicketsRecord> key) {
        super(child, key, PAYMENT_TICKETS);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public UniqueKey<PaymentTicketsRecord> getPrimaryKey() {
        return Keys.KEY_PAYMENT_TICKETS_PRIMARY;
    }

    @Override
    public List<UniqueKey<PaymentTicketsRecord>> getKeys() {
        return Arrays.<UniqueKey<PaymentTicketsRecord>>asList(Keys.KEY_PAYMENT_TICKETS_PRIMARY);
    }

    @Override
    public List<ForeignKey<PaymentTicketsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PaymentTicketsRecord, ?>>asList(Keys.FKBS183LBECNF9DU1WQH4MO1LXV);
    }

    public Members members() {
        return new Members(this, Keys.FKBS183LBECNF9DU1WQH4MO1LXV);
    }

    @Override
    public PaymentTickets as(String alias) {
        return new PaymentTickets(DSL.name(alias), this);
    }

    @Override
    public PaymentTickets as(Name alias) {
        return new PaymentTickets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentTickets rename(String name) {
        return new PaymentTickets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentTickets rename(Name name) {
        return new PaymentTickets(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, LocalDateTime, String, String, LocalDateTime, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
