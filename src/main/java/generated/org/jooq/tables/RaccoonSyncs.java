/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.RaccoonSyncsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RaccoonSyncs extends TableImpl<RaccoonSyncsRecord> {

    private static final long serialVersionUID = 2060096864;

    /**
     * The reference instance of <code>rs-parking-node.raccoon_syncs</code>
     */
    public static final RaccoonSyncs RACCOON_SYNCS = new RaccoonSyncs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RaccoonSyncsRecord> getRecordType() {
        return RaccoonSyncsRecord.class;
    }

    /**
     * The column <code>rs-parking-node.raccoon_syncs.raccoonSyncId</code>.
     */
    public final TableField<RaccoonSyncsRecord, Long> RACCOONSYNCID = createField(DSL.name("raccoonSyncId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rs-parking-node.raccoon_syncs.entityId</code>.
     */
    public final TableField<RaccoonSyncsRecord, String> ENTITYID = createField(DSL.name("entityId"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.raccoon_syncs.entityType</code>.
     */
    public final TableField<RaccoonSyncsRecord, String> ENTITYTYPE = createField(DSL.name("entityType"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.raccoon_syncs.sent</code>.
     */
    public final TableField<RaccoonSyncsRecord, LocalDateTime> SENT = createField(DSL.name("sent"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.raccoon_syncs.synced</code>.
     */
    public final TableField<RaccoonSyncsRecord, LocalDateTime> SYNCED = createField(DSL.name("synced"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.raccoon_syncs.verb</code>.
     */
    public final TableField<RaccoonSyncsRecord, String> VERB = createField(DSL.name("verb"), org.jooq.impl.SQLDataType.VARCHAR(8).nullable(false), this, "");

    /**
     * Create a <code>rs-parking-node.raccoon_syncs</code> table reference
     */
    public RaccoonSyncs() {
        this(DSL.name("raccoon_syncs"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.raccoon_syncs</code> table reference
     */
    public RaccoonSyncs(String alias) {
        this(DSL.name(alias), RACCOON_SYNCS);
    }

    /**
     * Create an aliased <code>rs-parking-node.raccoon_syncs</code> table reference
     */
    public RaccoonSyncs(Name alias) {
        this(alias, RACCOON_SYNCS);
    }

    private RaccoonSyncs(Name alias, Table<RaccoonSyncsRecord> aliased) {
        this(alias, aliased, null);
    }

    private RaccoonSyncs(Name alias, Table<RaccoonSyncsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RaccoonSyncs(Table<O> child, ForeignKey<O, RaccoonSyncsRecord> key) {
        super(child, key, RACCOON_SYNCS);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public Identity<RaccoonSyncsRecord, Long> getIdentity() {
        return Keys.IDENTITY_RACCOON_SYNCS;
    }

    @Override
    public UniqueKey<RaccoonSyncsRecord> getPrimaryKey() {
        return Keys.KEY_RACCOON_SYNCS_PRIMARY;
    }

    @Override
    public List<UniqueKey<RaccoonSyncsRecord>> getKeys() {
        return Arrays.<UniqueKey<RaccoonSyncsRecord>>asList(Keys.KEY_RACCOON_SYNCS_PRIMARY);
    }

    @Override
    public RaccoonSyncs as(String alias) {
        return new RaccoonSyncs(DSL.name(alias), this);
    }

    @Override
    public RaccoonSyncs as(Name alias) {
        return new RaccoonSyncs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RaccoonSyncs rename(String name) {
        return new RaccoonSyncs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RaccoonSyncs rename(Name name) {
        return new RaccoonSyncs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
