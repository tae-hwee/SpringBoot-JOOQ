/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.ParkingSpaceHistoriesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ParkingSpaceHistories extends TableImpl<ParkingSpaceHistoriesRecord> {

    private static final long serialVersionUID = 349531878;

    /**
     * The reference instance of <code>rs-parking-node.parking_space_histories</code>
     */
    public static final ParkingSpaceHistories PARKING_SPACE_HISTORIES = new ParkingSpaceHistories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParkingSpaceHistoriesRecord> getRecordType() {
        return ParkingSpaceHistoriesRecord.class;
    }

    /**
     * The column <code>rs-parking-node.parking_space_histories.parkingSpaceHistoryId</code>.
     */
    public final TableField<ParkingSpaceHistoriesRecord, Long> PARKINGSPACEHISTORYID = createField(DSL.name("parkingSpaceHistoryId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rs-parking-node.parking_space_histories.healthy</code>.
     */
    public final TableField<ParkingSpaceHistoriesRecord, Boolean> HEALTHY = createField(DSL.name("healthy"), org.jooq.impl.SQLDataType.BIT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>rs-parking-node.parking_space_histories.lastDeviceUpdated</code>.
     */
    public final TableField<ParkingSpaceHistoriesRecord, LocalDateTime> LASTDEVICEUPDATED = createField(DSL.name("lastDeviceUpdated"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.parking_space_histories.lpn</code>.
     */
    public final TableField<ParkingSpaceHistoriesRecord, String> LPN = createField(DSL.name("lpn"), org.jooq.impl.SQLDataType.VARCHAR(16).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.parking_space_histories.occupied</code>.
     */
    public final TableField<ParkingSpaceHistoriesRecord, LocalDateTime> OCCUPIED = createField(DSL.name("occupied"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.parking_space_histories.sensorVoltage</code>.
     */
    public final TableField<ParkingSpaceHistoriesRecord, Double> SENSORVOLTAGE = createField(DSL.name("sensorVoltage"), org.jooq.impl.SQLDataType.DOUBLE.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>rs-parking-node.parking_space_histories.parkingSpaceId</code>.
     */
    public final TableField<ParkingSpaceHistoriesRecord, String> PARKINGSPACEID = createField(DSL.name("parkingSpaceId"), org.jooq.impl.SQLDataType.CHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * Create a <code>rs-parking-node.parking_space_histories</code> table reference
     */
    public ParkingSpaceHistories() {
        this(DSL.name("parking_space_histories"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.parking_space_histories</code> table reference
     */
    public ParkingSpaceHistories(String alias) {
        this(DSL.name(alias), PARKING_SPACE_HISTORIES);
    }

    /**
     * Create an aliased <code>rs-parking-node.parking_space_histories</code> table reference
     */
    public ParkingSpaceHistories(Name alias) {
        this(alias, PARKING_SPACE_HISTORIES);
    }

    private ParkingSpaceHistories(Name alias, Table<ParkingSpaceHistoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ParkingSpaceHistories(Name alias, Table<ParkingSpaceHistoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ParkingSpaceHistories(Table<O> child, ForeignKey<O, ParkingSpaceHistoriesRecord> key) {
        super(child, key, PARKING_SPACE_HISTORIES);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public Identity<ParkingSpaceHistoriesRecord, Long> getIdentity() {
        return Keys.IDENTITY_PARKING_SPACE_HISTORIES;
    }

    @Override
    public UniqueKey<ParkingSpaceHistoriesRecord> getPrimaryKey() {
        return Keys.KEY_PARKING_SPACE_HISTORIES_PRIMARY;
    }

    @Override
    public List<UniqueKey<ParkingSpaceHistoriesRecord>> getKeys() {
        return Arrays.<UniqueKey<ParkingSpaceHistoriesRecord>>asList(Keys.KEY_PARKING_SPACE_HISTORIES_PRIMARY);
    }

    @Override
    public List<ForeignKey<ParkingSpaceHistoriesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ParkingSpaceHistoriesRecord, ?>>asList(Keys.FKPC4LAWQ3BVI3ML6E2JAK9MI31);
    }

    public ParkingSpaces parkingSpaces() {
        return new ParkingSpaces(this, Keys.FKPC4LAWQ3BVI3ML6E2JAK9MI31);
    }

    @Override
    public ParkingSpaceHistories as(String alias) {
        return new ParkingSpaceHistories(DSL.name(alias), this);
    }

    @Override
    public ParkingSpaceHistories as(Name alias) {
        return new ParkingSpaceHistories(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ParkingSpaceHistories rename(String name) {
        return new ParkingSpaceHistories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ParkingSpaceHistories rename(Name name) {
        return new ParkingSpaceHistories(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Boolean, LocalDateTime, String, LocalDateTime, Double, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
