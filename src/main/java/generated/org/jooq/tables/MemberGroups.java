/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.MemberGroupsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MemberGroups extends TableImpl<MemberGroupsRecord> {

    private static final long serialVersionUID = -318289975;

    /**
     * The reference instance of <code>rs-parking-node.member_groups</code>
     */
    public static final MemberGroups MEMBER_GROUPS = new MemberGroups();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MemberGroupsRecord> getRecordType() {
        return MemberGroupsRecord.class;
    }

    /**
     * The column <code>rs-parking-node.member_groups.id</code>.
     */
    public final TableField<MemberGroupsRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.member_groups.name</code>.
     */
    public final TableField<MemberGroupsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.member_groups.path</code>.
     */
    public final TableField<MemberGroupsRecord, String> PATH = createField(DSL.name("path"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>rs-parking-node.member_groups</code> table reference
     */
    public MemberGroups() {
        this(DSL.name("member_groups"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.member_groups</code> table reference
     */
    public MemberGroups(String alias) {
        this(DSL.name(alias), MEMBER_GROUPS);
    }

    /**
     * Create an aliased <code>rs-parking-node.member_groups</code> table reference
     */
    public MemberGroups(Name alias) {
        this(alias, MEMBER_GROUPS);
    }

    private MemberGroups(Name alias, Table<MemberGroupsRecord> aliased) {
        this(alias, aliased, null);
    }

    private MemberGroups(Name alias, Table<MemberGroupsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> MemberGroups(Table<O> child, ForeignKey<O, MemberGroupsRecord> key) {
        super(child, key, MEMBER_GROUPS);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public UniqueKey<MemberGroupsRecord> getPrimaryKey() {
        return Keys.KEY_MEMBER_GROUPS_PRIMARY;
    }

    @Override
    public List<UniqueKey<MemberGroupsRecord>> getKeys() {
        return Arrays.<UniqueKey<MemberGroupsRecord>>asList(Keys.KEY_MEMBER_GROUPS_PRIMARY, Keys.KEY_MEMBER_GROUPS_UK_L8UMU19MWYB1XO2QHHWKKF58U);
    }

    @Override
    public MemberGroups as(String alias) {
        return new MemberGroups(DSL.name(alias), this);
    }

    @Override
    public MemberGroups as(Name alias) {
        return new MemberGroups(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberGroups rename(String name) {
        return new MemberGroups(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberGroups rename(Name name) {
        return new MemberGroups(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
