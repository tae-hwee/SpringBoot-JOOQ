/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.PayedSeasonTicketLpnsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PayedSeasonTicketLpns extends TableImpl<PayedSeasonTicketLpnsRecord> {

    private static final long serialVersionUID = -794538626;

    /**
     * The reference instance of <code>rs-parking-node.payed_season_ticket_lpns</code>
     */
    public static final PayedSeasonTicketLpns PAYED_SEASON_TICKET_LPNS = new PayedSeasonTicketLpns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PayedSeasonTicketLpnsRecord> getRecordType() {
        return PayedSeasonTicketLpnsRecord.class;
    }

    /**
     * The column <code>rs-parking-node.payed_season_ticket_lpns.paymentId</code>.
     */
    public final TableField<PayedSeasonTicketLpnsRecord, String> PAYMENTID = createField(DSL.name("paymentId"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.payed_season_ticket_lpns.lpn</code>.
     */
    public final TableField<PayedSeasonTicketLpnsRecord, String> LPN = createField(DSL.name("lpn"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * Create a <code>rs-parking-node.payed_season_ticket_lpns</code> table reference
     */
    public PayedSeasonTicketLpns() {
        this(DSL.name("payed_season_ticket_lpns"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.payed_season_ticket_lpns</code> table reference
     */
    public PayedSeasonTicketLpns(String alias) {
        this(DSL.name(alias), PAYED_SEASON_TICKET_LPNS);
    }

    /**
     * Create an aliased <code>rs-parking-node.payed_season_ticket_lpns</code> table reference
     */
    public PayedSeasonTicketLpns(Name alias) {
        this(alias, PAYED_SEASON_TICKET_LPNS);
    }

    private PayedSeasonTicketLpns(Name alias, Table<PayedSeasonTicketLpnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PayedSeasonTicketLpns(Name alias, Table<PayedSeasonTicketLpnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> PayedSeasonTicketLpns(Table<O> child, ForeignKey<O, PayedSeasonTicketLpnsRecord> key) {
        super(child, key, PAYED_SEASON_TICKET_LPNS);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public List<ForeignKey<PayedSeasonTicketLpnsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PayedSeasonTicketLpnsRecord, ?>>asList(Keys.FKBNIULBRY6RKL35OQ2ERU9GVGX);
    }

    public Payments payments() {
        return new Payments(this, Keys.FKBNIULBRY6RKL35OQ2ERU9GVGX);
    }

    @Override
    public PayedSeasonTicketLpns as(String alias) {
        return new PayedSeasonTicketLpns(DSL.name(alias), this);
    }

    @Override
    public PayedSeasonTicketLpns as(Name alias) {
        return new PayedSeasonTicketLpns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PayedSeasonTicketLpns rename(String name) {
        return new PayedSeasonTicketLpns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PayedSeasonTicketLpns rename(Name name) {
        return new PayedSeasonTicketLpns(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
