/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.UserAccessesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserAccesses extends TableImpl<UserAccessesRecord> {

    private static final long serialVersionUID = -965836861;

    /**
     * The reference instance of <code>rs-parking-node.user_accesses</code>
     */
    public static final UserAccesses USER_ACCESSES = new UserAccesses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserAccessesRecord> getRecordType() {
        return UserAccessesRecord.class;
    }

    /**
     * The column <code>rs-parking-node.user_accesses.userToken</code>.
     */
    public final TableField<UserAccessesRecord, String> USERTOKEN = createField(DSL.name("userToken"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.user_accesses.clientIp</code>.
     */
    public final TableField<UserAccessesRecord, String> CLIENTIP = createField(DSL.name("clientIp"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.user_accesses.closed</code>.
     */
    public final TableField<UserAccessesRecord, LocalDateTime> CLOSED = createField(DSL.name("closed"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.user_accesses.keptAlive</code>.
     */
    public final TableField<UserAccessesRecord, String> KEPTALIVE = createField(DSL.name("keptAlive"), org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.user_accesses.lastAccessed</code>.
     */
    public final TableField<UserAccessesRecord, LocalDateTime> LASTACCESSED = createField(DSL.name("lastAccessed"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.user_accesses.opened</code>.
     */
    public final TableField<UserAccessesRecord, LocalDateTime> OPENED = createField(DSL.name("opened"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.user_accesses.userId</code>.
     */
    public final TableField<UserAccessesRecord, Long> USERID = createField(DSL.name("userId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>rs-parking-node.user_accesses</code> table reference
     */
    public UserAccesses() {
        this(DSL.name("user_accesses"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.user_accesses</code> table reference
     */
    public UserAccesses(String alias) {
        this(DSL.name(alias), USER_ACCESSES);
    }

    /**
     * Create an aliased <code>rs-parking-node.user_accesses</code> table reference
     */
    public UserAccesses(Name alias) {
        this(alias, USER_ACCESSES);
    }

    private UserAccesses(Name alias, Table<UserAccessesRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserAccesses(Name alias, Table<UserAccessesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UserAccesses(Table<O> child, ForeignKey<O, UserAccessesRecord> key) {
        super(child, key, USER_ACCESSES);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public UniqueKey<UserAccessesRecord> getPrimaryKey() {
        return Keys.KEY_USER_ACCESSES_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserAccessesRecord>> getKeys() {
        return Arrays.<UniqueKey<UserAccessesRecord>>asList(Keys.KEY_USER_ACCESSES_PRIMARY);
    }

    @Override
    public List<ForeignKey<UserAccessesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserAccessesRecord, ?>>asList(Keys.FKFHAQTYSVFYIK6B5L64QBFFU4U);
    }

    public Members members() {
        return new Members(this, Keys.FKFHAQTYSVFYIK6B5L64QBFFU4U);
    }

    @Override
    public UserAccesses as(String alias) {
        return new UserAccesses(DSL.name(alias), this);
    }

    @Override
    public UserAccesses as(Name alias) {
        return new UserAccesses(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAccesses rename(String name) {
        return new UserAccesses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAccesses rename(Name name) {
        return new UserAccesses(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, LocalDateTime, String, LocalDateTime, LocalDateTime, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
