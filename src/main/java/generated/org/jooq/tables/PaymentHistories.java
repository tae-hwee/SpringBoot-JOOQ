/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.PaymentHistoriesRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentHistories extends TableImpl<PaymentHistoriesRecord> {

    private static final long serialVersionUID = 689230298;

    /**
     * The reference instance of <code>rs-parking-node.payment_histories</code>
     */
    public static final PaymentHistories PAYMENT_HISTORIES = new PaymentHistories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentHistoriesRecord> getRecordType() {
        return PaymentHistoriesRecord.class;
    }

    /**
     * The column <code>rs-parking-node.payment_histories.paymentHistoryId</code>.
     */
    public final TableField<PaymentHistoriesRecord, Long> PAYMENTHISTORYID = createField(DSL.name("paymentHistoryId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rs-parking-node.payment_histories.acted</code>.
     */
    public final TableField<PaymentHistoriesRecord, LocalDateTime> ACTED = createField(DSL.name("acted"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.payment_histories.amount</code>.
     */
    public final TableField<PaymentHistoriesRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), org.jooq.impl.SQLDataType.DECIMAL(19, 2).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.payment_histories.status</code>.
     */
    public final TableField<PaymentHistoriesRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.payment_histories.actorId</code>.
     */
    public final TableField<PaymentHistoriesRecord, Long> ACTORID = createField(DSL.name("actorId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.payment_histories.paymentId</code>.
     */
    public final TableField<PaymentHistoriesRecord, String> PAYMENTID = createField(DSL.name("paymentId"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * Create a <code>rs-parking-node.payment_histories</code> table reference
     */
    public PaymentHistories() {
        this(DSL.name("payment_histories"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.payment_histories</code> table reference
     */
    public PaymentHistories(String alias) {
        this(DSL.name(alias), PAYMENT_HISTORIES);
    }

    /**
     * Create an aliased <code>rs-parking-node.payment_histories</code> table reference
     */
    public PaymentHistories(Name alias) {
        this(alias, PAYMENT_HISTORIES);
    }

    private PaymentHistories(Name alias, Table<PaymentHistoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private PaymentHistories(Name alias, Table<PaymentHistoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> PaymentHistories(Table<O> child, ForeignKey<O, PaymentHistoriesRecord> key) {
        super(child, key, PAYMENT_HISTORIES);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public Identity<PaymentHistoriesRecord, Long> getIdentity() {
        return Keys.IDENTITY_PAYMENT_HISTORIES;
    }

    @Override
    public UniqueKey<PaymentHistoriesRecord> getPrimaryKey() {
        return Keys.KEY_PAYMENT_HISTORIES_PRIMARY;
    }

    @Override
    public List<UniqueKey<PaymentHistoriesRecord>> getKeys() {
        return Arrays.<UniqueKey<PaymentHistoriesRecord>>asList(Keys.KEY_PAYMENT_HISTORIES_PRIMARY);
    }

    @Override
    public List<ForeignKey<PaymentHistoriesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PaymentHistoriesRecord, ?>>asList(Keys.FKG3I4DN26ETHTHK3OWUIH6WLED, Keys.FKK6Y5CEB3XY9CU843E63C7RPNW);
    }

    public Members members() {
        return new Members(this, Keys.FKG3I4DN26ETHTHK3OWUIH6WLED);
    }

    public Payments payments() {
        return new Payments(this, Keys.FKK6Y5CEB3XY9CU843E63C7RPNW);
    }

    @Override
    public PaymentHistories as(String alias) {
        return new PaymentHistories(DSL.name(alias), this);
    }

    @Override
    public PaymentHistories as(Name alias) {
        return new PaymentHistories(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentHistories rename(String name) {
        return new PaymentHistories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentHistories rename(Name name) {
        return new PaymentHistories(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, LocalDateTime, BigDecimal, String, Long, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
