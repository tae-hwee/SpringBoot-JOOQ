/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.ReservationsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reservations extends TableImpl<ReservationsRecord> {

    private static final long serialVersionUID = 2053514607;

    /**
     * The reference instance of <code>rs-parking-node.reservations</code>
     */
    public static final Reservations RESERVATIONS = new Reservations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReservationsRecord> getRecordType() {
        return ReservationsRecord.class;
    }

    /**
     * The column <code>rs-parking-node.reservations.reservationId</code>.
     */
    public final TableField<ReservationsRecord, Long> RESERVATIONID = createField(DSL.name("reservationId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rs-parking-node.reservations.created</code>.
     */
    public final TableField<ReservationsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.reservations.entered</code>.
     */
    public final TableField<ReservationsRecord, LocalDateTime> ENTERED = createField(DSL.name("entered"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.reservations.leaved</code>.
     */
    public final TableField<ReservationsRecord, LocalDateTime> LEAVED = createField(DSL.name("leaved"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.reservations.lpn</code>.
     */
    public final TableField<ReservationsRecord, String> LPN = createField(DSL.name("lpn"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.reservations.creatorId</code>.
     */
    public final TableField<ReservationsRecord, Long> CREATORID = createField(DSL.name("creatorId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.reservations.districtId</code>.
     */
    public final TableField<ReservationsRecord, Long> DISTRICTID = createField(DSL.name("districtId"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>rs-parking-node.reservations.visitId</code>.
     */
    public final TableField<ReservationsRecord, Long> VISITID = createField(DSL.name("visitId"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>rs-parking-node.reservations.details</code>.
     */
    public final TableField<ReservationsRecord, String> DETAILS = createField(DSL.name("details"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>rs-parking-node.reservations.apiConnectionId</code>.
     */
    public final TableField<ReservationsRecord, String> APICONNECTIONID = createField(DSL.name("apiConnectionId"), org.jooq.impl.SQLDataType.VARCHAR(16).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.reservations.aptCode</code>.
     */
    public final TableField<ReservationsRecord, String> APTCODE = createField(DSL.name("aptCode"), org.jooq.impl.SQLDataType.VARCHAR(64).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.reservations.dong</code>.
     */
    public final TableField<ReservationsRecord, String> DONG = createField(DSL.name("dong"), org.jooq.impl.SQLDataType.VARCHAR(16).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.reservations.ho</code>.
     */
    public final TableField<ReservationsRecord, String> HO = createField(DSL.name("ho"), org.jooq.impl.SQLDataType.VARCHAR(16).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.reservations.registrant</code>.
     */
    public final TableField<ReservationsRecord, String> REGISTRANT = createField(DSL.name("registrant"), org.jooq.impl.SQLDataType.VARCHAR(64).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.reservations.lastUpdated</code>.
     */
    public final TableField<ReservationsRecord, LocalDateTime> LASTUPDATED = createField(DSL.name("lastUpdated"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.reservations.umMainPark</code>.
     */
    public final TableField<ReservationsRecord, String> UMMAINPARK = createField(DSL.name("umMainPark"), org.jooq.impl.SQLDataType.CHAR(8).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>rs-parking-node.reservations.umParks</code>.
     */
    public final TableField<ReservationsRecord, String> UMPARKS = createField(DSL.name("umParks"), org.jooq.impl.SQLDataType.VARCHAR(128).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.reservations.umid</code>.
     */
    public final TableField<ReservationsRecord, String> UMID = createField(DSL.name("umid"), org.jooq.impl.SQLDataType.CHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * Create a <code>rs-parking-node.reservations</code> table reference
     */
    public Reservations() {
        this(DSL.name("reservations"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.reservations</code> table reference
     */
    public Reservations(String alias) {
        this(DSL.name(alias), RESERVATIONS);
    }

    /**
     * Create an aliased <code>rs-parking-node.reservations</code> table reference
     */
    public Reservations(Name alias) {
        this(alias, RESERVATIONS);
    }

    private Reservations(Name alias, Table<ReservationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Reservations(Name alias, Table<ReservationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Reservations(Table<O> child, ForeignKey<O, ReservationsRecord> key) {
        super(child, key, RESERVATIONS);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public Identity<ReservationsRecord, Long> getIdentity() {
        return Keys.IDENTITY_RESERVATIONS;
    }

    @Override
    public UniqueKey<ReservationsRecord> getPrimaryKey() {
        return Keys.KEY_RESERVATIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ReservationsRecord>> getKeys() {
        return Arrays.<UniqueKey<ReservationsRecord>>asList(Keys.KEY_RESERVATIONS_PRIMARY, Keys.KEY_RESERVATIONS_UK_FESXLKCH42W1NPO8MR49VXG53);
    }

    @Override
    public List<ForeignKey<ReservationsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ReservationsRecord, ?>>asList(Keys.FK8JC089FSEMDEYPE47ILP959NO, Keys.FK9GV75F9UFE416IF1ICG5WAY9K, Keys.FKCHLCMNOX988RPUFY6YVWVT0VO);
    }

    public Members members() {
        return new Members(this, Keys.FK8JC089FSEMDEYPE47ILP959NO);
    }

    public Districts districts() {
        return new Districts(this, Keys.FK9GV75F9UFE416IF1ICG5WAY9K);
    }

    public Visits visits() {
        return new Visits(this, Keys.FKCHLCMNOX988RPUFY6YVWVT0VO);
    }

    @Override
    public Reservations as(String alias) {
        return new Reservations(DSL.name(alias), this);
    }

    @Override
    public Reservations as(Name alias) {
        return new Reservations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Reservations rename(String name) {
        return new Reservations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reservations rename(Name name) {
        return new Reservations(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<Long, LocalDateTime, LocalDateTime, LocalDateTime, String, Long, Long, Long, String, String, String, String, String, String, LocalDateTime, String, String, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
