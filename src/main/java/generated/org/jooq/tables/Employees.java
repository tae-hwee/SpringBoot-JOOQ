/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.EmployeesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employees extends TableImpl<EmployeesRecord> {

    private static final long serialVersionUID = 372976215;

    /**
     * The reference instance of <code>rs-parking-node.employees</code>
     */
    public static final Employees EMPLOYEES = new Employees();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeesRecord> getRecordType() {
        return EmployeesRecord.class;
    }

    /**
     * The column <code>rs-parking-node.employees.employeeId</code>.
     */
    public final TableField<EmployeesRecord, Long> EMPLOYEEID = createField(DSL.name("employeeId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rs-parking-node.employees.active</code>.
     */
    public final TableField<EmployeesRecord, String> ACTIVE = createField(DSL.name("active"), org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.employees.created</code>.
     */
    public final TableField<EmployeesRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.employees.dropped</code>.
     */
    public final TableField<EmployeesRecord, LocalDateTime> DROPPED = createField(DSL.name("dropped"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.employees.name</code>.
     */
    public final TableField<EmployeesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.employees.creatorId</code>.
     */
    public final TableField<EmployeesRecord, Long> CREATORID = createField(DSL.name("creatorId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.employees.dropperId</code>.
     */
    public final TableField<EmployeesRecord, Long> DROPPERID = createField(DSL.name("dropperId"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>rs-parking-node.employees</code> table reference
     */
    public Employees() {
        this(DSL.name("employees"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.employees</code> table reference
     */
    public Employees(String alias) {
        this(DSL.name(alias), EMPLOYEES);
    }

    /**
     * Create an aliased <code>rs-parking-node.employees</code> table reference
     */
    public Employees(Name alias) {
        this(alias, EMPLOYEES);
    }

    private Employees(Name alias, Table<EmployeesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employees(Name alias, Table<EmployeesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Employees(Table<O> child, ForeignKey<O, EmployeesRecord> key) {
        super(child, key, EMPLOYEES);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public Identity<EmployeesRecord, Long> getIdentity() {
        return Keys.IDENTITY_EMPLOYEES;
    }

    @Override
    public UniqueKey<EmployeesRecord> getPrimaryKey() {
        return Keys.KEY_EMPLOYEES_PRIMARY;
    }

    @Override
    public List<UniqueKey<EmployeesRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeesRecord>>asList(Keys.KEY_EMPLOYEES_PRIMARY);
    }

    @Override
    public List<ForeignKey<EmployeesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EmployeesRecord, ?>>asList(Keys.FKCLWT2MJCMM318E7QK7BN6J05E, Keys.FKM4IXQLMTJFMV0NCNATPKBG6DS);
    }

    public Members fkclwt2mjcmm318e7qk7bn6j05e() {
        return new Members(this, Keys.FKCLWT2MJCMM318E7QK7BN6J05E);
    }

    public Members fkm4ixqlmtjfmv0ncnatpkbg6ds() {
        return new Members(this, Keys.FKM4IXQLMTJFMV0NCNATPKBG6DS);
    }

    @Override
    public Employees as(String alias) {
        return new Employees(DSL.name(alias), this);
    }

    @Override
    public Employees as(Name alias) {
        return new Employees(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(String name) {
        return new Employees(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(Name name) {
        return new Employees(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, LocalDateTime, LocalDateTime, String, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
