/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.OfficesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Offices extends TableImpl<OfficesRecord> {

    private static final long serialVersionUID = 1233886811;

    /**
     * The reference instance of <code>rs-parking-node.offices</code>
     */
    public static final Offices OFFICES = new Offices();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OfficesRecord> getRecordType() {
        return OfficesRecord.class;
    }

    /**
     * The column <code>rs-parking-node.offices.officeId</code>.
     */
    public final TableField<OfficesRecord, Long> OFFICEID = createField(DSL.name("officeId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rs-parking-node.offices.address</code>.
     */
    public final TableField<OfficesRecord, String> ADDRESS = createField(DSL.name("address"), org.jooq.impl.SQLDataType.VARCHAR(128).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.offices.brn</code>.
     */
    public final TableField<OfficesRecord, String> BRN = createField(DSL.name("brn"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.offices.ceo</code>.
     */
    public final TableField<OfficesRecord, String> CEO = createField(DSL.name("ceo"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.offices.code</code>.
     */
    public final TableField<OfficesRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(8).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.offices.email</code>.
     */
    public final TableField<OfficesRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.offices.name</code>.
     */
    public final TableField<OfficesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.offices.phoneNumber</code>.
     */
    public final TableField<OfficesRecord, String> PHONENUMBER = createField(DSL.name("phoneNumber"), org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.offices.private_key</code>.
     */
    public final TableField<OfficesRecord, String> PRIVATE_KEY = createField(DSL.name("private_key"), org.jooq.impl.SQLDataType.VARCHAR(4096).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.offices.public_key</code>.
     */
    public final TableField<OfficesRecord, String> PUBLIC_KEY = createField(DSL.name("public_key"), org.jooq.impl.SQLDataType.VARCHAR(1024).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.offices.details</code>.
     */
    public final TableField<OfficesRecord, String> DETAILS = createField(DSL.name("details"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>rs-parking-node.offices.districtName</code>.
     */
    public final TableField<OfficesRecord, String> DISTRICTNAME = createField(DSL.name("districtName"), org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.offices.created</code>.
     */
    public final TableField<OfficesRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.offices.lastUpdated</code>.
     */
    public final TableField<OfficesRecord, LocalDateTime> LASTUPDATED = createField(DSL.name("lastUpdated"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.offices.nonPaymentExpiredDay</code>.
     */
    public final TableField<OfficesRecord, Integer> NONPAYMENTEXPIREDDAY = createField(DSL.name("nonPaymentExpiredDay"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>rs-parking-node.offices.nonPaymentManagerNumber</code>.
     */
    public final TableField<OfficesRecord, String> NONPAYMENTMANAGERNUMBER = createField(DSL.name("nonPaymentManagerNumber"), org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.offices.address2</code>.
     */
    public final TableField<OfficesRecord, String> ADDRESS2 = createField(DSL.name("address2"), org.jooq.impl.SQLDataType.VARCHAR(128).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>rs-parking-node.offices</code> table reference
     */
    public Offices() {
        this(DSL.name("offices"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.offices</code> table reference
     */
    public Offices(String alias) {
        this(DSL.name(alias), OFFICES);
    }

    /**
     * Create an aliased <code>rs-parking-node.offices</code> table reference
     */
    public Offices(Name alias) {
        this(alias, OFFICES);
    }

    private Offices(Name alias, Table<OfficesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Offices(Name alias, Table<OfficesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Offices(Table<O> child, ForeignKey<O, OfficesRecord> key) {
        super(child, key, OFFICES);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public Identity<OfficesRecord, Long> getIdentity() {
        return Keys.IDENTITY_OFFICES;
    }

    @Override
    public UniqueKey<OfficesRecord> getPrimaryKey() {
        return Keys.KEY_OFFICES_PRIMARY;
    }

    @Override
    public List<UniqueKey<OfficesRecord>> getKeys() {
        return Arrays.<UniqueKey<OfficesRecord>>asList(Keys.KEY_OFFICES_PRIMARY);
    }

    @Override
    public Offices as(String alias) {
        return new Offices(DSL.name(alias), this);
    }

    @Override
    public Offices as(Name alias) {
        return new Offices(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Offices rename(String name) {
        return new Offices(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Offices rename(Name name) {
        return new Offices(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Long, String, String, String, String, String, String, String, String, String, String, String, LocalDateTime, LocalDateTime, Integer, String, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
