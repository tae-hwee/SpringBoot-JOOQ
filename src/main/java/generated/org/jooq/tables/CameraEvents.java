/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.CameraEventsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CameraEvents extends TableImpl<CameraEventsRecord> {

    private static final long serialVersionUID = -315588111;

    /**
     * The reference instance of <code>rs-parking-node.camera_events</code>
     */
    public static final CameraEvents CAMERA_EVENTS = new CameraEvents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CameraEventsRecord> getRecordType() {
        return CameraEventsRecord.class;
    }

    /**
     * The column <code>rs-parking-node.camera_events.cameraEventId</code>.
     */
    public final TableField<CameraEventsRecord, String> CAMERAEVENTID = createField(DSL.name("cameraEventId"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.camera_events.camearChannel</code>.
     */
    public final TableField<CameraEventsRecord, String> CAMEARCHANNEL = createField(DSL.name("camearChannel"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.camera_events.cameraAngle</code>.
     */
    public final TableField<CameraEventsRecord, String> CAMERAANGLE = createField(DSL.name("cameraAngle"), org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.camera_events.cameraIp</code>.
     */
    public final TableField<CameraEventsRecord, String> CAMERAIP = createField(DSL.name("cameraIp"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.camera_events.created</code>.
     */
    public final TableField<CameraEventsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.camera_events.details</code>.
     */
    public final TableField<CameraEventsRecord, String> DETAILS = createField(DSL.name("details"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>rs-parking-node.camera_events.filename</code>.
     */
    public final TableField<CameraEventsRecord, String> FILENAME = createField(DSL.name("filename"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.camera_events.lpn</code>.
     */
    public final TableField<CameraEventsRecord, String> LPN = createField(DSL.name("lpn"), org.jooq.impl.SQLDataType.VARCHAR(16).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.camera_events.status</code>.
     */
    public final TableField<CameraEventsRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.camera_events.type</code>.
     */
    public final TableField<CameraEventsRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>rs-parking-node.camera_events</code> table reference
     */
    public CameraEvents() {
        this(DSL.name("camera_events"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.camera_events</code> table reference
     */
    public CameraEvents(String alias) {
        this(DSL.name(alias), CAMERA_EVENTS);
    }

    /**
     * Create an aliased <code>rs-parking-node.camera_events</code> table reference
     */
    public CameraEvents(Name alias) {
        this(alias, CAMERA_EVENTS);
    }

    private CameraEvents(Name alias, Table<CameraEventsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CameraEvents(Name alias, Table<CameraEventsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CameraEvents(Table<O> child, ForeignKey<O, CameraEventsRecord> key) {
        super(child, key, CAMERA_EVENTS);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public UniqueKey<CameraEventsRecord> getPrimaryKey() {
        return Keys.KEY_CAMERA_EVENTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<CameraEventsRecord>> getKeys() {
        return Arrays.<UniqueKey<CameraEventsRecord>>asList(Keys.KEY_CAMERA_EVENTS_PRIMARY);
    }

    @Override
    public CameraEvents as(String alias) {
        return new CameraEvents(DSL.name(alias), this);
    }

    @Override
    public CameraEvents as(Name alias) {
        return new CameraEvents(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CameraEvents rename(String name) {
        return new CameraEvents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CameraEvents rename(Name name) {
        return new CameraEvents(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, String, String, LocalDateTime, String, String, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
