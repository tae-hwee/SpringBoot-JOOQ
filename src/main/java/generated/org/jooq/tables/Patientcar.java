/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.PatientcarRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Patientcar extends TableImpl<PatientcarRecord> {

    private static final long serialVersionUID = 2133442020;

    /**
     * The reference instance of <code>rs-parking-node.patientcar</code>
     */
    public static final Patientcar PATIENTCAR = new Patientcar();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PatientcarRecord> getRecordType() {
        return PatientcarRecord.class;
    }

    /**
     * The column <code>rs-parking-node.patientcar.id</code>.
     */
    public final TableField<PatientcarRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rs-parking-node.patientcar.lpn</code>.
     */
    public final TableField<PatientcarRecord, String> LPN = createField(DSL.name("lpn"), org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.patientcar.patientId</code>.
     */
    public final TableField<PatientcarRecord, String> PATIENTID = createField(DSL.name("patientId"), org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.patientcar.updated</code>.
     */
    public final TableField<PatientcarRecord, LocalDateTime> UPDATED = createField(DSL.name("updated"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>rs-parking-node.patientcar</code> table reference
     */
    public Patientcar() {
        this(DSL.name("patientcar"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.patientcar</code> table reference
     */
    public Patientcar(String alias) {
        this(DSL.name(alias), PATIENTCAR);
    }

    /**
     * Create an aliased <code>rs-parking-node.patientcar</code> table reference
     */
    public Patientcar(Name alias) {
        this(alias, PATIENTCAR);
    }

    private Patientcar(Name alias, Table<PatientcarRecord> aliased) {
        this(alias, aliased, null);
    }

    private Patientcar(Name alias, Table<PatientcarRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Patientcar(Table<O> child, ForeignKey<O, PatientcarRecord> key) {
        super(child, key, PATIENTCAR);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public Identity<PatientcarRecord, Long> getIdentity() {
        return Keys.IDENTITY_PATIENTCAR;
    }

    @Override
    public UniqueKey<PatientcarRecord> getPrimaryKey() {
        return Keys.KEY_PATIENTCAR_PRIMARY;
    }

    @Override
    public List<UniqueKey<PatientcarRecord>> getKeys() {
        return Arrays.<UniqueKey<PatientcarRecord>>asList(Keys.KEY_PATIENTCAR_PRIMARY);
    }

    @Override
    public Patientcar as(String alias) {
        return new Patientcar(DSL.name(alias), this);
    }

    @Override
    public Patientcar as(Name alias) {
        return new Patientcar(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Patientcar rename(String name) {
        return new Patientcar(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Patientcar rename(Name name) {
        return new Patientcar(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
