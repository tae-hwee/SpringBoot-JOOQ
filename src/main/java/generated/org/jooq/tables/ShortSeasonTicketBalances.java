/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.ShortSeasonTicketBalancesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShortSeasonTicketBalances extends TableImpl<ShortSeasonTicketBalancesRecord> {

    private static final long serialVersionUID = -1310022944;

    /**
     * The reference instance of <code>rs-parking-node.short_season_ticket_balances</code>
     */
    public static final ShortSeasonTicketBalances SHORT_SEASON_TICKET_BALANCES = new ShortSeasonTicketBalances();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShortSeasonTicketBalancesRecord> getRecordType() {
        return ShortSeasonTicketBalancesRecord.class;
    }

    /**
     * The column <code>rs-parking-node.short_season_ticket_balances.id</code>.
     */
    public final TableField<ShortSeasonTicketBalancesRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.short_season_ticket_balances.cancelTarget</code>.
     */
    public final TableField<ShortSeasonTicketBalancesRecord, String> CANCELTARGET = createField(DSL.name("cancelTarget"), org.jooq.impl.SQLDataType.CHAR(32).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>rs-parking-node.short_season_ticket_balances.closed</code>.
     */
    public final TableField<ShortSeasonTicketBalancesRecord, LocalDateTime> CLOSED = createField(DSL.name("closed"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.short_season_ticket_balances.created</code>.
     */
    public final TableField<ShortSeasonTicketBalancesRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.short_season_ticket_balances.discard</code>.
     */
    public final TableField<ShortSeasonTicketBalancesRecord, LocalDateTime> DISCARD = createField(DSL.name("discard"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.short_season_ticket_balances.minutes</code>.
     */
    public final TableField<ShortSeasonTicketBalancesRecord, Integer> MINUTES = createField(DSL.name("minutes"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.short_season_ticket_balances.minutesBalance</code>.
     */
    public final TableField<ShortSeasonTicketBalancesRecord, Integer> MINUTESBALANCE = createField(DSL.name("minutesBalance"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.short_season_ticket_balances.type</code>.
     */
    public final TableField<ShortSeasonTicketBalancesRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.short_season_ticket_balances.creatorId</code>.
     */
    public final TableField<ShortSeasonTicketBalancesRecord, Long> CREATORID = createField(DSL.name("creatorId"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>rs-parking-node.short_season_ticket_balances.memberId</code>.
     */
    public final TableField<ShortSeasonTicketBalancesRecord, Long> MEMBERID = createField(DSL.name("memberId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.short_season_ticket_balances.seasonTicketTemplateId</code>.
     */
    public final TableField<ShortSeasonTicketBalancesRecord, Long> SEASONTICKETTEMPLATEID = createField(DSL.name("seasonTicketTemplateId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.short_season_ticket_balances.seasonTicketId</code>.
     */
    public final TableField<ShortSeasonTicketBalancesRecord, String> SEASONTICKETID = createField(DSL.name("seasonTicketId"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.short_season_ticket_balances.autoRefillMinutes</code>.
     */
    public final TableField<ShortSeasonTicketBalancesRecord, Integer> AUTOREFILLMINUTES = createField(DSL.name("autoRefillMinutes"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>rs-parking-node.short_season_ticket_balances</code> table reference
     */
    public ShortSeasonTicketBalances() {
        this(DSL.name("short_season_ticket_balances"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.short_season_ticket_balances</code> table reference
     */
    public ShortSeasonTicketBalances(String alias) {
        this(DSL.name(alias), SHORT_SEASON_TICKET_BALANCES);
    }

    /**
     * Create an aliased <code>rs-parking-node.short_season_ticket_balances</code> table reference
     */
    public ShortSeasonTicketBalances(Name alias) {
        this(alias, SHORT_SEASON_TICKET_BALANCES);
    }

    private ShortSeasonTicketBalances(Name alias, Table<ShortSeasonTicketBalancesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ShortSeasonTicketBalances(Name alias, Table<ShortSeasonTicketBalancesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ShortSeasonTicketBalances(Table<O> child, ForeignKey<O, ShortSeasonTicketBalancesRecord> key) {
        super(child, key, SHORT_SEASON_TICKET_BALANCES);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public UniqueKey<ShortSeasonTicketBalancesRecord> getPrimaryKey() {
        return Keys.KEY_SHORT_SEASON_TICKET_BALANCES_PRIMARY;
    }

    @Override
    public List<UniqueKey<ShortSeasonTicketBalancesRecord>> getKeys() {
        return Arrays.<UniqueKey<ShortSeasonTicketBalancesRecord>>asList(Keys.KEY_SHORT_SEASON_TICKET_BALANCES_PRIMARY);
    }

    @Override
    public List<ForeignKey<ShortSeasonTicketBalancesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ShortSeasonTicketBalancesRecord, ?>>asList(Keys.FKDS5GD4CGS0P54915KEIIAFQG1, Keys.FKJV00Q8VV03AVLEN8DGTX05VCD, Keys.FKT3N8UC1Q8YSE9D7LJ685ACF4K, Keys.FKNP7Y93CJ2WKF19SE6IJYFTNP0);
    }

    public Members fkds5gd4cgs0p54915keiiafqg1() {
        return new Members(this, Keys.FKDS5GD4CGS0P54915KEIIAFQG1);
    }

    public Members fkjv00q8vv03avlen8dgtx05vcd() {
        return new Members(this, Keys.FKJV00Q8VV03AVLEN8DGTX05VCD);
    }

    public SeasonTicketTemplates seasonTicketTemplates() {
        return new SeasonTicketTemplates(this, Keys.FKT3N8UC1Q8YSE9D7LJ685ACF4K);
    }

    public SeasonTickets seasonTickets() {
        return new SeasonTickets(this, Keys.FKNP7Y93CJ2WKF19SE6IJYFTNP0);
    }

    @Override
    public ShortSeasonTicketBalances as(String alias) {
        return new ShortSeasonTicketBalances(DSL.name(alias), this);
    }

    @Override
    public ShortSeasonTicketBalances as(Name alias) {
        return new ShortSeasonTicketBalances(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShortSeasonTicketBalances rename(String name) {
        return new ShortSeasonTicketBalances(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShortSeasonTicketBalances rename(Name name) {
        return new ShortSeasonTicketBalances(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, String, LocalDateTime, LocalDateTime, LocalDateTime, Integer, Integer, String, Long, Long, Long, String, Integer> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
