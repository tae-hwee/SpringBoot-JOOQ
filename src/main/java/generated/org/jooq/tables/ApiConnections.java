/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.ApiConnectionsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApiConnections extends TableImpl<ApiConnectionsRecord> {

    private static final long serialVersionUID = -1712906227;

    /**
     * The reference instance of <code>rs-parking-node.api_connections</code>
     */
    public static final ApiConnections API_CONNECTIONS = new ApiConnections();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApiConnectionsRecord> getRecordType() {
        return ApiConnectionsRecord.class;
    }

    /**
     * The column <code>rs-parking-node.api_connections.id</code>.
     */
    public final TableField<ApiConnectionsRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.api_connections.active</code>.
     */
    public final TableField<ApiConnectionsRecord, String> ACTIVE = createField(DSL.name("active"), org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.api_connections.created</code>.
     */
    public final TableField<ApiConnectionsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.api_connections.guestAuth</code>.
     */
    public final TableField<ApiConnectionsRecord, String> GUESTAUTH = createField(DSL.name("guestAuth"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>rs-parking-node.api_connections.guestToken</code>.
     */
    public final TableField<ApiConnectionsRecord, String> GUESTTOKEN = createField(DSL.name("guestToken"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.api_connections.nodeToken</code>.
     */
    public final TableField<ApiConnectionsRecord, String> NODETOKEN = createField(DSL.name("nodeToken"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.api_connections.memberId</code>.
     */
    public final TableField<ApiConnectionsRecord, Long> MEMBERID = createField(DSL.name("memberId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>rs-parking-node.api_connections</code> table reference
     */
    public ApiConnections() {
        this(DSL.name("api_connections"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.api_connections</code> table reference
     */
    public ApiConnections(String alias) {
        this(DSL.name(alias), API_CONNECTIONS);
    }

    /**
     * Create an aliased <code>rs-parking-node.api_connections</code> table reference
     */
    public ApiConnections(Name alias) {
        this(alias, API_CONNECTIONS);
    }

    private ApiConnections(Name alias, Table<ApiConnectionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApiConnections(Name alias, Table<ApiConnectionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ApiConnections(Table<O> child, ForeignKey<O, ApiConnectionsRecord> key) {
        super(child, key, API_CONNECTIONS);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public UniqueKey<ApiConnectionsRecord> getPrimaryKey() {
        return Keys.KEY_API_CONNECTIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ApiConnectionsRecord>> getKeys() {
        return Arrays.<UniqueKey<ApiConnectionsRecord>>asList(Keys.KEY_API_CONNECTIONS_PRIMARY);
    }

    @Override
    public List<ForeignKey<ApiConnectionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ApiConnectionsRecord, ?>>asList(Keys.FKL9PJN7UPGKWD5U87X6MIRG2R3);
    }

    public Members members() {
        return new Members(this, Keys.FKL9PJN7UPGKWD5U87X6MIRG2R3);
    }

    @Override
    public ApiConnections as(String alias) {
        return new ApiConnections(DSL.name(alias), this);
    }

    @Override
    public ApiConnections as(Name alias) {
        return new ApiConnections(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiConnections rename(String name) {
        return new ApiConnections(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiConnections rename(Name name) {
        return new ApiConnections(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, LocalDateTime, String, String, String, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
