/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.VisitReceiptsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VisitReceipts extends TableImpl<VisitReceiptsRecord> {

    private static final long serialVersionUID = -1212465037;

    /**
     * The reference instance of <code>rs-parking-node.visit_receipts</code>
     */
    public static final VisitReceipts VISIT_RECEIPTS = new VisitReceipts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VisitReceiptsRecord> getRecordType() {
        return VisitReceiptsRecord.class;
    }

    /**
     * The column <code>rs-parking-node.visit_receipts.id</code>.
     */
    public final TableField<VisitReceiptsRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.visit_receipts.amount</code>.
     */
    public final TableField<VisitReceiptsRecord, Integer> AMOUNT = createField(DSL.name("amount"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.visit_receipts.created</code>.
     */
    public final TableField<VisitReceiptsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.visit_receipts.posType</code>.
     */
    public final TableField<VisitReceiptsRecord, String> POSTYPE = createField(DSL.name("posType"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.visit_receipts.purchased</code>.
     */
    public final TableField<VisitReceiptsRecord, LocalDateTime> PURCHASED = createField(DSL.name("purchased"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.visit_receipts.visitId</code>.
     */
    public final TableField<VisitReceiptsRecord, Long> VISITID = createField(DSL.name("visitId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>rs-parking-node.visit_receipts</code> table reference
     */
    public VisitReceipts() {
        this(DSL.name("visit_receipts"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.visit_receipts</code> table reference
     */
    public VisitReceipts(String alias) {
        this(DSL.name(alias), VISIT_RECEIPTS);
    }

    /**
     * Create an aliased <code>rs-parking-node.visit_receipts</code> table reference
     */
    public VisitReceipts(Name alias) {
        this(alias, VISIT_RECEIPTS);
    }

    private VisitReceipts(Name alias, Table<VisitReceiptsRecord> aliased) {
        this(alias, aliased, null);
    }

    private VisitReceipts(Name alias, Table<VisitReceiptsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> VisitReceipts(Table<O> child, ForeignKey<O, VisitReceiptsRecord> key) {
        super(child, key, VISIT_RECEIPTS);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public UniqueKey<VisitReceiptsRecord> getPrimaryKey() {
        return Keys.KEY_VISIT_RECEIPTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<VisitReceiptsRecord>> getKeys() {
        return Arrays.<UniqueKey<VisitReceiptsRecord>>asList(Keys.KEY_VISIT_RECEIPTS_PRIMARY);
    }

    @Override
    public VisitReceipts as(String alias) {
        return new VisitReceipts(DSL.name(alias), this);
    }

    @Override
    public VisitReceipts as(Name alias) {
        return new VisitReceipts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VisitReceipts rename(String name) {
        return new VisitReceipts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VisitReceipts rename(Name name) {
        return new VisitReceipts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, Integer, LocalDateTime, String, LocalDateTime, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
