/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.CamerasRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cameras extends TableImpl<CamerasRecord> {

    private static final long serialVersionUID = -315833959;

    /**
     * The reference instance of <code>rs-parking-node.cameras</code>
     */
    public static final Cameras CAMERAS = new Cameras();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CamerasRecord> getRecordType() {
        return CamerasRecord.class;
    }

    /**
     * The column <code>rs-parking-node.cameras.cameraId</code>.
     */
    public final TableField<CamerasRecord, String> CAMERAID = createField(DSL.name("cameraId"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.cameras.channel</code>.
     */
    public final TableField<CamerasRecord, String> CHANNEL = createField(DSL.name("channel"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.cameras.created</code>.
     */
    public final TableField<CamerasRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.cameras.details</code>.
     */
    public final TableField<CamerasRecord, String> DETAILS = createField(DSL.name("details"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>rs-parking-node.cameras.dropped</code>.
     */
    public final TableField<CamerasRecord, LocalDateTime> DROPPED = createField(DSL.name("dropped"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.cameras.ip</code>.
     */
    public final TableField<CamerasRecord, String> IP = createField(DSL.name("ip"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.cameras.name</code>.
     */
    public final TableField<CamerasRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.cameras.districtId</code>.
     */
    public final TableField<CamerasRecord, Long> DISTRICTID = createField(DSL.name("districtId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>rs-parking-node.cameras</code> table reference
     */
    public Cameras() {
        this(DSL.name("cameras"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.cameras</code> table reference
     */
    public Cameras(String alias) {
        this(DSL.name(alias), CAMERAS);
    }

    /**
     * Create an aliased <code>rs-parking-node.cameras</code> table reference
     */
    public Cameras(Name alias) {
        this(alias, CAMERAS);
    }

    private Cameras(Name alias, Table<CamerasRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cameras(Name alias, Table<CamerasRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Cameras(Table<O> child, ForeignKey<O, CamerasRecord> key) {
        super(child, key, CAMERAS);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public UniqueKey<CamerasRecord> getPrimaryKey() {
        return Keys.KEY_CAMERAS_PRIMARY;
    }

    @Override
    public List<UniqueKey<CamerasRecord>> getKeys() {
        return Arrays.<UniqueKey<CamerasRecord>>asList(Keys.KEY_CAMERAS_PRIMARY, Keys.KEY_CAMERAS_UKLS7P6WCACJRMUMQCKL8909GKY);
    }

    @Override
    public List<ForeignKey<CamerasRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CamerasRecord, ?>>asList(Keys.FK477UGUWK1W028Q0AARJ4HY4M6);
    }

    public Districts districts() {
        return new Districts(this, Keys.FK477UGUWK1W028Q0AARJ4HY4M6);
    }

    @Override
    public Cameras as(String alias) {
        return new Cameras(DSL.name(alias), this);
    }

    @Override
    public Cameras as(Name alias) {
        return new Cameras(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cameras rename(String name) {
        return new Cameras(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cameras rename(Name name) {
        return new Cameras(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, LocalDateTime, String, LocalDateTime, String, String, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
