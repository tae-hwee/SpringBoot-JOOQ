/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.RemoteRawRecordsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RemoteRawRecords extends TableImpl<RemoteRawRecordsRecord> {

    private static final long serialVersionUID = -570265708;

    /**
     * The reference instance of <code>rs-parking-node.remote_raw_records</code>
     */
    public static final RemoteRawRecords REMOTE_RAW_RECORDS = new RemoteRawRecords();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RemoteRawRecordsRecord> getRecordType() {
        return RemoteRawRecordsRecord.class;
    }

    /**
     * The column <code>rs-parking-node.remote_raw_records.entityId</code>.
     */
    public final TableField<RemoteRawRecordsRecord, String> ENTITYID = createField(DSL.name("entityId"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.remote_raw_records.entityType</code>.
     */
    public final TableField<RemoteRawRecordsRecord, String> ENTITYTYPE = createField(DSL.name("entityType"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.remote_raw_records.data</code>.
     */
    public final TableField<RemoteRawRecordsRecord, String> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>rs-parking-node.remote_raw_records.saved</code>.
     */
    public final TableField<RemoteRawRecordsRecord, LocalDateTime> SAVED = createField(DSL.name("saved"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>rs-parking-node.remote_raw_records</code> table reference
     */
    public RemoteRawRecords() {
        this(DSL.name("remote_raw_records"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.remote_raw_records</code> table reference
     */
    public RemoteRawRecords(String alias) {
        this(DSL.name(alias), REMOTE_RAW_RECORDS);
    }

    /**
     * Create an aliased <code>rs-parking-node.remote_raw_records</code> table reference
     */
    public RemoteRawRecords(Name alias) {
        this(alias, REMOTE_RAW_RECORDS);
    }

    private RemoteRawRecords(Name alias, Table<RemoteRawRecordsRecord> aliased) {
        this(alias, aliased, null);
    }

    private RemoteRawRecords(Name alias, Table<RemoteRawRecordsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RemoteRawRecords(Table<O> child, ForeignKey<O, RemoteRawRecordsRecord> key) {
        super(child, key, REMOTE_RAW_RECORDS);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public UniqueKey<RemoteRawRecordsRecord> getPrimaryKey() {
        return Keys.KEY_REMOTE_RAW_RECORDS_PRIMARY;
    }

    @Override
    public List<UniqueKey<RemoteRawRecordsRecord>> getKeys() {
        return Arrays.<UniqueKey<RemoteRawRecordsRecord>>asList(Keys.KEY_REMOTE_RAW_RECORDS_PRIMARY);
    }

    @Override
    public RemoteRawRecords as(String alias) {
        return new RemoteRawRecords(DSL.name(alias), this);
    }

    @Override
    public RemoteRawRecords as(Name alias) {
        return new RemoteRawRecords(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RemoteRawRecords rename(String name) {
        return new RemoteRawRecords(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RemoteRawRecords rename(Name name) {
        return new RemoteRawRecords(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
