/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.VideosRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Videos extends TableImpl<VideosRecord> {

    private static final long serialVersionUID = 1586580479;

    /**
     * The reference instance of <code>rs-parking-node.videos</code>
     */
    public static final Videos VIDEOS = new Videos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VideosRecord> getRecordType() {
        return VideosRecord.class;
    }

    /**
     * The column <code>rs-parking-node.videos.videoId</code>.
     */
    public final TableField<VideosRecord, Long> VIDEOID = createField(DSL.name("videoId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rs-parking-node.videos.code</code>.
     */
    public final TableField<VideosRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(16).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.videos.data</code>.
     */
    public final TableField<VideosRecord, String> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>rs-parking-node.videos.description</code>.
     */
    public final TableField<VideosRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(2048).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.videos.dropped</code>.
     */
    public final TableField<VideosRecord, LocalDateTime> DROPPED = createField(DSL.name("dropped"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rs-parking-node.videos.name</code>.
     */
    public final TableField<VideosRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(64).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.videos.status</code>.
     */
    public final TableField<VideosRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(16).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.videos.type</code>.
     */
    public final TableField<VideosRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.videos.url</code>.
     */
    public final TableField<VideosRecord, String> URL = createField(DSL.name("url"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>rs-parking-node.videos.districtId</code>.
     */
    public final TableField<VideosRecord, Long> DISTRICTID = createField(DSL.name("districtId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.videos.machineId</code>.
     */
    public final TableField<VideosRecord, Long> MACHINEID = createField(DSL.name("machineId"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>rs-parking-node.videos</code> table reference
     */
    public Videos() {
        this(DSL.name("videos"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.videos</code> table reference
     */
    public Videos(String alias) {
        this(DSL.name(alias), VIDEOS);
    }

    /**
     * Create an aliased <code>rs-parking-node.videos</code> table reference
     */
    public Videos(Name alias) {
        this(alias, VIDEOS);
    }

    private Videos(Name alias, Table<VideosRecord> aliased) {
        this(alias, aliased, null);
    }

    private Videos(Name alias, Table<VideosRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Videos(Table<O> child, ForeignKey<O, VideosRecord> key) {
        super(child, key, VIDEOS);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public Identity<VideosRecord, Long> getIdentity() {
        return Keys.IDENTITY_VIDEOS;
    }

    @Override
    public UniqueKey<VideosRecord> getPrimaryKey() {
        return Keys.KEY_VIDEOS_PRIMARY;
    }

    @Override
    public List<UniqueKey<VideosRecord>> getKeys() {
        return Arrays.<UniqueKey<VideosRecord>>asList(Keys.KEY_VIDEOS_PRIMARY, Keys.KEY_VIDEOS_UK_HOD3QOJ67PG8GO93UGC0HDRBG);
    }

    @Override
    public List<ForeignKey<VideosRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VideosRecord, ?>>asList(Keys.FKEA80VB9CIVYNALXMLFDRHOQ4J, Keys.FKNSBV14ESL6VA5E4VSWWJRDKP7);
    }

    public Districts districts() {
        return new Districts(this, Keys.FKEA80VB9CIVYNALXMLFDRHOQ4J);
    }

    public Machines machines() {
        return new Machines(this, Keys.FKNSBV14ESL6VA5E4VSWWJRDKP7);
    }

    @Override
    public Videos as(String alias) {
        return new Videos(DSL.name(alias), this);
    }

    @Override
    public Videos as(Name alias) {
        return new Videos(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Videos rename(String name) {
        return new Videos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Videos rename(Name name) {
        return new Videos(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, String, String, LocalDateTime, String, String, String, String, Long, Long> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
