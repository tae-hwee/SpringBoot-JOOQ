/*
 * This file is generated by jOOQ.
 */
package generated.org.jooq.tables;


import generated.org.jooq.Keys;
import generated.org.jooq.RsParkingNode;
import generated.org.jooq.tables.records.DiscountsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Discounts extends TableImpl<DiscountsRecord> {

    private static final long serialVersionUID = 529312069;

    /**
     * The reference instance of <code>rs-parking-node.discounts</code>
     */
    public static final Discounts DISCOUNTS = new Discounts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DiscountsRecord> getRecordType() {
        return DiscountsRecord.class;
    }

    /**
     * The column <code>rs-parking-node.discounts.discountId</code>.
     */
    public final TableField<DiscountsRecord, Long> DISCOUNTID = createField(DSL.name("discountId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rs-parking-node.discounts.code</code>.
     */
    public final TableField<DiscountsRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>rs-parking-node.discounts.visitId</code>.
     */
    public final TableField<DiscountsRecord, Long> VISITID = createField(DSL.name("visitId"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>rs-parking-node.discounts</code> table reference
     */
    public Discounts() {
        this(DSL.name("discounts"), null);
    }

    /**
     * Create an aliased <code>rs-parking-node.discounts</code> table reference
     */
    public Discounts(String alias) {
        this(DSL.name(alias), DISCOUNTS);
    }

    /**
     * Create an aliased <code>rs-parking-node.discounts</code> table reference
     */
    public Discounts(Name alias) {
        this(alias, DISCOUNTS);
    }

    private Discounts(Name alias, Table<DiscountsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Discounts(Name alias, Table<DiscountsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Discounts(Table<O> child, ForeignKey<O, DiscountsRecord> key) {
        super(child, key, DISCOUNTS);
    }

    @Override
    public Schema getSchema() {
        return RsParkingNode.RS_PARKING_NODE;
    }

    @Override
    public Identity<DiscountsRecord, Long> getIdentity() {
        return Keys.IDENTITY_DISCOUNTS;
    }

    @Override
    public UniqueKey<DiscountsRecord> getPrimaryKey() {
        return Keys.KEY_DISCOUNTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<DiscountsRecord>> getKeys() {
        return Arrays.<UniqueKey<DiscountsRecord>>asList(Keys.KEY_DISCOUNTS_PRIMARY);
    }

    @Override
    public List<ForeignKey<DiscountsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DiscountsRecord, ?>>asList(Keys.FKCCRYOWNKN7XPNMPONCPGDPU8Y);
    }

    public Visits visits() {
        return new Visits(this, Keys.FKCCRYOWNKN7XPNMPONCPGDPU8Y);
    }

    @Override
    public Discounts as(String alias) {
        return new Discounts(DSL.name(alias), this);
    }

    @Override
    public Discounts as(Name alias) {
        return new Discounts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Discounts rename(String name) {
        return new Discounts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Discounts rename(Name name) {
        return new Discounts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
